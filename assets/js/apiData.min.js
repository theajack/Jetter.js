var apiData={jetSelect:[{title:"J.ready()",intro:"Start html",test:false,function:"Do something after that the document structure has been loaded(not including images and other non-text media )",howUse:"Parameter:function",code:'<script>\n　J.ready(function(){\n　　//do something after that the document structure has been loaded (not including images and other non-text media )\n　});\n　J.ready(function(){\n　　//You can use this function more then one time like this\n　});\n</script>'},{title:"J.load()",intro:"Start html",test:false,function:"Do something after that the document structure has been loaded(including images and other non-text media )",howUse:"Parameter:function",code:'<script>\n　J.load(function(){\n　　//do something after that the document structure has been loaded (including images and other non-text media )\n　　//this function will be executed after J.ready()\n　});\n　J.load(function(){\n　　//You can use this function more then one time like this\n　});\n</script>'},{title:"J.id()",intro:"Select an element",test:true,function:"Select an element by id",howUse:"Parameter:String; Return:HTMLElement",code:'<input type="text" id="test"/>\n<input type="button" onclick="test()" value="click me"/>\n<script>\n　function test(){\n　　J.id("test").val("I am focused").focus();\n　}\n</script>'},{title:"J.class()",intro:"Select element",test:true,function:"Select an element or elements by class name",howUse:"Parameter:String; Return:HTMLElement|HTMLCollection",code:'<input type="text" class="test-one"/>\n<input type="button" onclick="testOne()" value="one"/>\n<input type="text" class="test-many"/>\n<input type="text" class="test-many"/>\n<input type="text" class="test-many"/>\n<input type="button" onclick="testMany()" value="many"/>\n<script>\n　function testOne(){\n　　J.class("test-one").val("I am selected");\n　}\n　function testMany(){\n　　J.class("test-many").val("I am selected");\n　}\n</script>'},{title:"J.attr()",intro:"Select element",test:true,function:"Select an element or elements by attribute name or attribute name=value",howUse:"Parameter:String(name|name=value); Return:HTMLElement|NodeList",code:'<input type="text" jet-test="test1"/>\n<input type="button" onclick="testAttr()" value="attr"/>\n<input type="text" jet-test="test2"/>\n<input type="button" onclick="testAttrValue()" value="attr=value"/>\n<br></br>\n<input type="text" jet-test2="test-one"/>\n<input type="button" onclick="testOne()" value="one"/>\n<input type="text" jet-test3="test-maney"/>\n<input type="text" jet-test3="test-maney"/>\n<input type="text" jet-test3="test-maney"/>\n<input type="button" onclick="testMany()" value="many"/>\n<script>\n　function testAttr(){\n　　J.attr("jet-test").val("I have jet-test attribute");\n　}\n　function testAttrValue(){\n　　J.attr("jet-test=test2").val("My jet-test value equals test2");\n　}\n　function testOne(){\n　　J.attr("jet-test2").val("I have jet-test2 attribute");\n　}\n　function testMany(){\n　　J.attr("jet-test3").val("I have jet-test3 attribute");\n　}\n</script>'},{title:"J.tag()",intro:"Select element",test:true,function:"Select an element or elements by tag name",howUse:"Parameter:String; Return:HTMLElement|HTMLCollection",code:'<h5>h5</h5>\n<input type="button" onclick="selectH5()" value="one"/>\n<p>p</p>\n<p>p</p>\n<p/>p</p>\n<input type="button" onclick="selectP()" value="many"/>\n<script>\n　function selectH5(){\n　　J.tag("h5").text("I am selected");\n　}\n　function selectP(){\n　　J.tag("p").text("I am selected");\n　}\n</script>'},{title:"J.name()",intro:"Select element",test:true,function:"Select an element or elements by name",howUse:"Parameter:String; Return:HTMLElement|HTMLCollection",code:'<input type="text" name="test-one"/>\n<input type="button" onclick="testOne()" value="one"/>\n<input type="text" name="test-many"/>\n<input type="text" name="test-many"/>\n<input type="text" name="test-many"/>\n<input type="button" onclick="testMany()" value="many"/>\n<script>\n　function testOne(){\n　　J.name("test-one").val("I am selected");\n　}\n　function testMany(){\n　　J.name("test-many").val("I am selected");\n　}\n</script>'},{title:"J.select()",intro:"Select element",test:true,function:"Select an element or elements by a css selector",howUse:"Parameter:String(css selector); Return:HTMLElement|NodeList",code:'<input type="text" id="testSelect"/>\n<input type="button" onclick="testid()" value="id"/>\n<input type="text" class="test-select"/>\n<input type="button" onclick="testClass()" value="class"/>\n<input type="text" jet-test="test"/>\n<input type="button" onclick="testAttr()" value="attr"/>\n<input type="button" onclick="testAttrValue()" value="attr=value"/>\n<input type="text" id="testSelect2" class="test-select"/>\n<input type="button" onclick="testCombination()" value="Combination"/>\n<br></br>\n<p>You can use any legal css selector</p>\n<script>\n　function testid(){\n　　J.select("#testSelect").val("I am selected");\n　}\n　function testClass(){\n　　J.select(".test-select").val("I am selected");\n　}\n　function testAttr(){\n　　J.select("[jet-test]").val("I am selected by attr");\n　}\n　function testAttrValue(){\n　　J.select("[jet-test=test]").val("Selected by attr=value");\n　}\n　function testCombination(){\n　　J.select("#testSelect2.test-select").val("Selected by combination");\n　}\n</script>'},{title:"S()",intro:"equal J.select()",test:true,function:"Select an element or elements by a css selector",howUse:"Parameter:String(css selector); Return:HTMLElement|NodeList",code:'<input type="text" id="testSelect"/>\n<input type="button" onclick="testid()" value="id"/>\n<p>You can use any legal css selector</p>\n<script>\n　function testid(){\n　　S("#testSelect").val("I am selected");\n　　//S() = J.select()\n　　//S() will return body\n　}\n</script>'},{title:"s=S",intro:"equal S() and J.select()",test:true,function:"Select an element or elements by a css selector",howUse:"Parameter:String(css selector); Return:HTMLElement|NodeList",code:'<input type="text" id="testSelect"/>\n<input type="button" onclick="testid()" value="id"/>\n<p>You can use any legal css selector</p>\n<script>\n　function testid(){\n　　s("#testSelect").val("I am selected");\n　　//s() = S() =J.select()\n　}\n</script>'},{title:"J.new()",intro:"Creat HTMLElement",test:true,function:"Creat HTMLElement with a tag name or tag name+css selector",howUse:"Parameter:String(tag name|tag name+css selector); Return:HTMLElement",code:'<div id="testNew">result</div>\n<input type="button" onclick="testTag()" value="by tag"/>\n<input type="button" onclick="testSelector1()" value="by tag+selector1"/>\n<input type="button" onclick="testSelector2()" value="by tag+selector2"/>\n<input type="button" onclick="testSelector3()" value="by tag+selector3"/>\n<p>You can use any legal css selector</p>\n<script>\n　function testTag(){\n　　var span=J.new("span");\n　　J.id("testNew").empty().append(span);\n　　J.id("testNew").text(J.id("testNew").html());\n　}\n　function testSelector1(){\n　　var span=J.new("span#test");\n　　J.id("testNew").empty().append(span);\n　　J.id("testNew").text(J.id("testNew").html());\n　}\n　function testSelector2(){\n　　var span=J.new("span#test.test");\n　　J.id("testNew").empty().append(span);\n　　J.id("testNew").text(J.id("testNew").html());\n　}\n　function testSelector3(){\n　　var span=J.new("span#test.test[jet-test=test]");\n　　J.id("testNew").empty().append(span);\n　　J.id("testNew").text(J.id("testNew").html());\n　}\n</script>'},{title:"J.body()",intro:"Get body",test:false,function:"Return document.body",howUse:"Parameter:null; Return:HTMLElement(document.body)",code:'<script>\n　J.body();\n　//return document body\n　//equal S() or J.tag("body")\n</script>'},{title:"J.width()",intro:"Get window width",test:true,function:"Return width of broswer window visible area",howUse:"Parameter:null; Return:int(window width)",code:'<input type="text" id="testWidth"/>\n<input type="button" onclick="testWidth()" value="width"/>\n<script>\n　function testWidth(){\n　var width=J.width();\n　　S("#testWidth").val("Window width : "+width+" px");\n　}\n</script>'},{title:"J.height()",intro:"Get window height",test:true,function:"Return height of broswer window visible area",howUse:"Parameter:null; Return int(window height)",code:'<input type="text" id="testHeight"/>\n<input type="button" onclick="testHeight()" value="height"/>\n<script>\n　function testHeight(){\n　var height=J.height();\n　　S("#testHeight").val("Window height : "+height+" px");\n　}\n</script>'},{title:"J.scroll()",intro:"Scroll page",test:true,function:"Scroll page in vertical with a distance or get page scroll top",howUse:"int[Function|String][int|String](distance,callback,speed)|null; Return:int|null",code:'<input type="button" onclick="textScroll(50)" value="body scroll 50px"/>\n<input type="button" onclick="textScroll(-50)" value="body scroll -50px"/>\n<input type="button" onclick="textScrollCallback()" value="add callback"/>\n<input type="button" onclick="textScrollSpeed()" value="add speed"/>\n<input type="button" onclick="textScrollCS()" value="add callback and speed fast"/>\n<input type="button" onclick="textScrollCSInt()" value="add callback and speed 300"/>\n<script>\n　function textScroll(d){\n　　J.scroll(d);\n　}\n　function textScrollCallback(){\n　　J.scroll(100,function(){\n　　　alert("scroll");\n　　});\n　　//or use string "alert("scroll")" replace function\n　}\n　function textScrollSpeed(){\n　　J.scroll(-100,null,100);\n　　//or use string "alert("scroll")" replace function\n　}\n　function textScrollCS(){\n　　J.scroll(100,function(){\n　　　alert("scroll");\n　　},"fast");\n　}\n　function textScrollCSInt(){\n　　J.scroll(-100,function(){\n　　　alert("scroll");\n　　},300);\n　}\n</script>'},{title:"J.scrollTo()",intro:"Scroll page",test:true,function:"Scroll page in vertical to a position by a value",howUse:"int[Function|String][int|String](posY,callback,speed); Return:null",code:'<input type="button" onclick="textScrollTo()" value="body scroll to top 300px"/>\n<script>\n　function textScrollTo(){\n　　J.tag("body").scrollTo(300,"alert(300)","fast");\n　　//Opitional parameters is the same as scroll\n　}\n</script>'},{title:"j=J",intro:"use j OR J",test:false,function:"j=J",howUse:"You can use j to replace J",code:'<script>\n　j.body();\n　j.select("#id")\n　//...\n</script>'},{title:".findClass()",intro:"Select HTMLElement in the children of this",test:true,function:"Select HTMLElement by class name in the children of this",howUse:"Obj:HTMLElement; Parameter:String; Return HTMLElement|HTMLCollection",code:'<div id="testDiv">\n　<input type="text" class="test"/>\n　<input type="text" class="test"/>\n</div>\n<input type="text" class="test"/>\n<input type="button" onclick="test()" value="click me"/>\n<script>\n　function test(){\n　　J.id("testDiv").findClass("test").val("I am selected");\n　}\n</script>'},{title:".findAttr()",intro:"Select HTMLElement in the children of this",test:true,function:"Select HTMLElement by attribute name in the children of this",howUse:"Obj:HTMLElement; Parameter:String; Return HTMLElement|NodeList",code:'<div id="testDiv">\n　<input type="text" jet-test="test"/>\n　<input type="text" jet-test="test2"/>\n</div>\n<input type="text" class="test"/>\n<input type="button" onclick="testAttr()" value="click me"/>\n<input type="button" onclick="testAttrValue()" value="click me"/>\n<script>\n　function testAttr(){\n　　J.id("testDiv").findAttr("jet-test").val("I am selected by attribute");\n　}\n　function testAttrValue(){\n　　J.id("testDiv").findAttr("jet-test=test").val("I am selected by value is test");\n　}\n</script>'},{title:".findTag()",intro:"Select HTMLElement in the children of this",test:true,function:"Select HTMLElement by tag name in the children of this",howUse:"Obj:HTMLElement; Parameter:String; Return HTMLElement|HTMLCollection",code:'<div id="test">\n　<h5>h5</h5>\n　<input type="button" onclick="selectH5()" value="one"/>\n　<p>p</p>\n　<p>p</p>\n　<p/>p</p>\n　<input type="button" onclick="selectP()" value="many"/>\n</div>\n<script>\n　function selectH5(){\n　　J.id("test").findTag("h5").text("I am selected");\n　}\n　function selectP(){\n　　J.id("test").findTag("p").text("I am selected");\n　}\n</script>'},{title:".findName()",intro:"Select HTMLElement in the children of this",test:true,function:"Select HTMLElement by name in the children of this",howUse:"Obj:HTMLElement; Parameter:String; Return HTMLElement|HTMLCollection",code:'<div id="testDiv">\n　<input type="text" name="test"/>\n　<input type="button" onclick="testAttr()" value="click me"/>\n　<input type="text" name="test2"/>\n　<input type="text" name="test2"/>\n　<input type="button" onclick="testAttrValue()" value="click me"/>\n</div>\n<script>\n　function testAttr(){\n　　J.id("testDiv").findName("test").val("I am selected");\n　}\n　function testAttrValue(){\n　　J.id("testDiv").findName("test2").val("I am selected");\n　}\n</script>'},{title:".select()",intro:"Select HTMLElement in the children of this",test:true,function:"Select HTMLElement by css selector in the children of this",howUse:"Obj:HTMLElement; Parameter:String; Return HTMLElement|NodeList",code:'<div id="test">\n　<input type="text" id="testSelect"/>\n　<input type="button" onclick="testid()" value="single"/>\n　<input type="text" id="testSelect2" class="test-select"/>\n　<input type="button" onclick="testCombination()" value="Combination"/>\n</div>\n<br></br>\n<p>You can use any legal css selector</p>\n<script>\n　function testid(){\n　　J.id("test").select("#testSelect").val("I am selected");\n　}\n　function testCombination(){\n　　J.id("test").select("#testSelect2.test-select").val("Selected by combination");\n　}\n</script>'},{title:".each()",intro:"Ergodic a list",test:true,function:"Ergodic HTMLCollection NodeList or Array",howUse:"Obj:HTMLCollection|NodeList|Array; Parameter:function(item,[index]){}; Return HTMLElement|NodeList|Array(Self)",code:'<input type="text" class="test"/>\n<input type="text" class="test"/>\n<input type="text" class="test"/>\n<input type="button" onclick="testEach1()" value="with index"/>\n<input type="button" onclick="testEach2()" value="without index"/>\n<script>\n　function testEach1(){\n　　J.class("test").each(function(item,i){\n　　　item.val("I am No."+i);\n　　});\n　}\n　function testEach2(){\n　　J.class("test").each(function(item){\n　　　item.val("I am an item");\n　　});\n　}\n</script>'},{title:".child()",intro:"Get children or a child",test:true,function:"Get children list or a child by index (start with 0)",howUse:"Obj:HTMLElement; Parameter:null|int; Return HTMLElement|HTMLCollection",code:'<div id="test">\n　<input type="text"/>\n　<input type="text"/>\n　<input type="text"/>\n</div>\n<input type="button" onclick="single(0)" value="1"/>\n<input type="button" onclick="single(1)" value="2"/>\n<input type="button" onclick="single(2)" value="3"/>\n<input type="button" onclick="allChild()" value="all"/>\n<script>\n　function single(i){\n　　J.id("test").child(i).val("I am children "+i);\n　}\n　function allChild(){\n　　J.id("test").child().val("All selected");\n　}\n</script>'},{title:".parent()",intro:"Get parent",test:true,function:"Get parent or parent of parent...(parent(0) is self)",howUse:"Obj:HTMLElement; Parameter:null|int; Return HTMLElement",code:'<div name="p2">p2\n　<div name="p1">p1\n　　<div id="test" name="p0">p0</div>\n　</div>\n</div>\n<input type="button" onclick="parentDefault()" value="parent"/>\n<input type="button" onclick="parentByI(0)" value="parent(0)"/>\n<input type="button" onclick="parentByI(1)" value="parent(1)"/>\n<input type="button" onclick="parentByI(2)" value="parent(2)"/>\n<div id="show"></div>\n<script>\n　function parentByI(i){\n　　var text=J.id("test").parent(i).attr("name");\n　　J.id("show").text(text);\n　}\n　function parentDefault(){\n　　var text=J.id("test").parent().attr("name");\n　　J.id("show").text(text);\n　}\n</script>'},{title:".next()",intro:"Get single element",test:true,function:"Get next element",howUse:"Obj:HTMLElement; Parameter:null; Return HTMLElement",code:'<input type="text" id="test" value="Me"/>\n<input type="text"/>\n<input type="button" onclick="testNext()" value="click me"/>\n<script>\n　function testNext(){\n　　var text=J.id("test").next().val("I am his next element");\n　}\n</script>'},{title:".prev()",intro:"Get single element",test:true,function:"Get previous element",howUse:"Obj:HTMLElement; Parameter:null; Return HTMLElement",code:'<input type="text"/>\n<input type="text" id="test" value="Me"/>\n<input type="button" onclick="testPrev()" value="click me"/>\n<script>\n　function testPrev(){\n　　var text=J.id("test").prev().val("I am his previous element");\n　}\n</script>'},{title:".index()",intro:"Get element's index",test:true,function:"Get element's index in their parent's children list",howUse:"Obj:HTMLElement; Parameter:null; Return int",code:'<div>\n　<input type="button" onclick="testIndex(this)" value="click me to see my index"/>\n　<input type="button" onclick="testIndex(this)" value="click me to see my index"/>\n　<input type="button" onclick="testIndex(this)" value="click me to see my index"/>\n</div>\n<script>\n　function testIndex(obj){\n　　obj.val("My index is "+obj.index());\n　}\n</script>'},{title:".append()",intro:"Add element",test:true,function:"Add an element or many elements in the last or certain position of their children list",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:HTMLElement|Array of HTMLElement,[index]; Return self",code:'<div id="parentEle">\n　<input type="text" value="old"/>\n　<input type="text" value="old"/>\n　<input type="text" value="old"/>\n</div>\n<input type="button" onclick="testAppend()" value="append a new textbox"/>\n<input type="button" onclick="testAppendByIndex()" value="append a new textbox with index=1"/>\n<script>\n　var j_i=1;\n　function testAppend(){\n　　J.id("parentEle").append(J.new("input[type=text][value=I am new "+j_i+"]"));\n　　j_i++;\n　}\n　function testAppendByIndex(){\n　　J.id("parentEle").append(J.new("input[type=text][value=I am new "+j_i+"]"),1);\n　　j_i++;\n　}\n</script>'},{title:".prepend()",intro:"Add element",test:true,function:"Add an element or many elements in the first position of their children list",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:HTMLElement|Array of HTMLElement; Return self",code:'<div id="parentEle">\n　<input type="text" value="old"/>\n　<input type="text" value="old"/>\n　<input type="text" value="old"/>\n</div>\n<input type="button" onclick="testPrepend()" value="prepend a new textbox"/>\n<script>\n　var j_i=1;\n　function testPrepend(){\n　　J.id("parentEle").prepend(J.new("input[type=text][value=I am new"+j_i+"]"));\n　　j_i++;\n　}\n</script>'},{title:".after()",intro:"Add element",test:true,function:"Add an element or many elements after self",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:HTMLElement|Array of HTMLElement; Return self",code:'<input type="text" id="test" value="after me"/>\n<input type="text" value="old"/>\n<input type="button" onclick="testAfter()" value="add a new textbox after an element"/>\n<script>\n　var j_i=1;\n　function testAfter(){\n　　J.id("test").after(J.new("input[type=text][value=I am new"+j_i+"]"));\n　　j_i++;\n　}\n</script>'},{title:".before()",intro:"Add element",test:true,function:"Add an element or many elements before self",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:HTMLElement|Array of HTMLElement; Return self",code:'<input type="text" value="old2"/>\n<input type="text" id="test" value="before me"/>\n<input type="button" onclick="testBefore()" value="add a new textbox before an element"/>\n<script>\n　var j_i=1;\n　function testBefore(){\n　　J.id("test").before(J.new("input[type=text][value=I am new"+j_i+"]"));\n　　j_i++;\n　}\n</script>'},{title:".remove()",intro:"Remove element",test:true,function:"Remove this of a element in this",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:null|int|HTMLElement; Return null|this",code:'<input type="text" class="test" value="text1"/>\n<input type="text" class="test" id="testR" value="text2 will be remove"/>\n<input type="text" class="test" value="text3"/>\n<input type="text" class="test" value="text4"/>\n<input type="text" class="test" value="text5"/>\n<input type="button" onclick="testRemove()" value="remove a textbox"/>\n<input type="button" onclick="testRemoveC()" value="remove a textbox with HTMLCollection index=0"/>\n<input type="button" onclick="testRemoveE()" value="remove a textbox with HTMLElement"/>\n<input type="button" onclick="testRemoveAll()" value="remove All  textbox"/>\n<script>\n　function testRemove(){\n　　J.id("testR").remove();\n　}\n　function testRemoveC(){\n　　J.class("test").remove(0);\n　}\n　function testRemoveE(){\n　　J.class("test").remove(J.class("test")[0]);\n　}\n　function testRemoveAll(){\n　　J.class("test").remove();\n　}\n</script>'},{title:".empty()",intro:"Remove all Children and text",test:true,function:"Remove all Children and text of this",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:null; Return this",code:'<div id="parentEle">\n　<input type="text" value="child0"/>\n　<input type="text" value="child1"/>\n　<input type="text" value="child2"/>\n</div>\n<input type="button" onclick="testEmpty()" value="clear all children"/>\n<script>\n　function testEmpty(){\n　　J.id("parentEle").empty();\n　}\n</script>'},{title:".removeChild()",intro:"Remove one Children",test:true,function:"Remove one Children of this",howUse:"Obj:HTMLElement; Parameter:HTMLElement; Return this",code:'<div id="parentEle">\n　<input type="text" value="child0"/>\n　<input type="text" id="testR" value="child1 will be remove"/>\n　<input type="text" value="child2"/>\n</div>\n<input type="button" onclick="testRemoveChild()" value="remove a child"/>\n<script>\n　function testRemoveChild(){\n　　J.id("parentEle").removeChild(J.id("testR"));\n　　//if you want to remove a child by index\n　　//use "J.id("parentEle").child(i).remove()"\n　}\n</script>'},{title:".css()",intro:"Get Or Set CSS",test:true,function:"Get Or Set CSS of an element of elements",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:String,String String,Json; Return this",code:'<input type="text" id="test" value="Me"/>\n<input type="button" onclick="testGet()" value="get background color"/>\n<input type="button" onclick="testSetSingle()" value="set single style"/>\n<input type="button" onclick="testSetMany()" value="set many styles"/>\n<input type="button" onclick="testSetByPlus()" value="set style by +="/>\n<script>\n　function testGet(){\n　　J.id("test").val(J.id("test").css("background-color"));\n　}\n　function testSetSingle(){\n　　J.id("test").css("background-color","#999");\n　}\n　function testSetMany(){\n　　J.id("test").css({"border-color":"#f00","color":"#f00"});\n　}\n　function testSetByPlus(){\n　　J.id("test").css("height","+=50px");\n　}\n</script>'},{title:".attr()",intro:"Get Or Set attribute",test:true,function:"Get Or Set attribute of an element of elements",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:String,String String,Json; Return this",code:'<div><input type="text" id="test" value="Me"/></div>\n<input type="button" onclick="testGet()" value="get attribute value"/>\n<input type="button" onclick="testSetSingle()" value="set single attribute value"/>\n<input type="button" onclick="testSetMany()" value="set many attribute values"/>\n<div id="show"></div>\n<script>\n　function testGet(){\n　　J.id("test").val(J.id("test").attr("id"));\n　}\n　function testSetSingle(){\n　　J.id("test").attr("newAttr","new attr");\n　　J.id("show").text(J.id("test").parent().html());\n　}\n　function testSetMany(){\n　　J.id("test").attr({newAttr2:"new attr2",newAttr3:3});\n　　J.id("show").text(J.id("test").parent().html());\n　}\n</script>'},{title:".data()",intro:"Save or delete data",test:true,function:"Save or delete or clear data in a HTMLElement",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:String,String String,Json,String null,null; Return String|Number|Json|null|this",code:'<input type="text" id="test" value="I save the data"/>\n<input type="button" onclick="testSetSingle()" value="set single data:data1=1"/>\n<input type="button" onclick="testSetMany()" value="set many data:data2=2;data3=3"/>\n<input type="button" onclick="testGet()" value="get single data:data3"/>\n<input type="button" onclick="testGetAll()" value="get all data"/>\n<input type="button" onclick="clearSingleData()" value="clear single data:data1"/>\n<input type="button" onclick="clearData()" value="clear all data"/>\n<div id="show"></div>\n<script>\n　function testSetSingle(){\n　　J.id("test").data("data1",1);\n　　J.id("show").text("Set data1="+J.id("test").data("data1"));\n　}\n　function testSetMany(){\n　　J.id("test").data({data2:"2",data3:3});\n　　J.id("show").text("Set data2="+J.id("test").data("data2")+" and data3 ="+J.id("test").data("data3"));\n　}\n　function testGet(){\n　　var data3=J.id("test").data("data3");\n　　J.id("show").text("data3="+data3);\n　}\n　function testGetAll(){\n　　var dataJson=J.id("test").data();\n　　J.id("show").text("All data as json string="+JSON.stringify(dataJson));\n　}\n　function clearSingleData(){\n　　J.id("test").data("data1",null);\n　　J.id("show").text("Clear data1,now data1="+J.id("test").data("data1"));\n　}\n　function clearData(){\n　　J.id("test").data(null);\n　　J.id("show").text("All clear,now all data as json is "+JSON.stringify(J.id("test").data()));\n　}\n</script>'},{title:".hasAttr()",intro:"Judge attribute",test:true,function:"To check whether a certain attribute is in this",howUse:"Obj:HTMLElement; Parameter:String; Return Boolean",code:'<input type="button" test="test" onclick="testHasAttr(this)" value="Do I have attribute named test"/>\n<script>\n　function testHasAttr(obj){\n　　obj.val("The answer is "+obj.hasAttr("test"));\n　}\n</script>'},{title:".removeAttr()",intro:"Remove attribute",test:true,function:"Remove one attribute or many attributes by name",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:String('a'|'a b'); Return this",code:'<div>\n　<input type="button" test="test" onclick="testRemoveAttr(this)" value="Click to remove attr named test"/>\n</div>\n<div id="show"></div>\n<br/>\n<input　type="text" test="test" class="test" value="I have attr named test"/>\n<input　type="text" test="test" class="test" value="I have attr named test"/>\n<input　type="text" test="test" class="test" value="I have attr named test"/>\n<input type="button" onclick="testList()" value="use it to an element list"/>\n<script>\n　function testRemoveAttr(obj){\n　　obj.removeAttr("test");//use "a1 a2 a3..."to remove many attributes\n　　J.id("show").text(obj.parent().html());\n　}\n　function testList(){\n　　J.class("test").removeAttr("test").val("I lost it");\n　}\n</script>'},{title:".hasClass()",intro:"Judge class",test:true,function:"To check whether a certain class is in this",howUse:"Obj:HTMLElement; Parameter:String; Return Boolean",code:'<input type="button" class="test" onclick="testHasClass(this)" value="Do I have class named test"/>\n<script>\n　function testHasClass(obj){\n　　obj.val("The answer is "+obj.hasClass("test"));\n　}\n</script>'},{title:".addClass()",intro:"Add class",test:true,function:"Add one class or many classes a element or a element list",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:String('a'|'a b'); Return this",code:'<div>\n　<input type="button" onclick="testAddClass(this)" value="Click to add class named test"/>\n</div>\n<div id="show"></div>\n<br/>\n<div id="test">\n　<input type="text"/>\n　<input type="text"/>\n</div>\n<input type="button" onclick="testList()" value="use it to an element list"/>\n<script>\n　function testAddClass(obj){\n　　obj.addClass("test");\n　　J.id("show").text(obj.parent().html());\n　}\n　function testList(){\n　　J.id("test").child().addClass("test").val("I get it");\n　　J.id("show").text(J.id("test").html());\n　}\n</script>'},{title:".removeClass()",intro:"Remove class",test:true,function:"Remove one class or many classes in a element or a element list",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:String('a'|'a b'); Return this",code:'<div>\n　<input type="text" id="test" class="nottest1 nottest2 test1 test2 test3"/>\n</div>\n<input type="button" onclick="testRemoveClass()" value="Click to remove class named test1"/>\n<input type="button" onclick="testRemoveManyClass()" value="Click to remove two classes named test2 and test3"/>\n<input type="button" onclick="testRemoveAllClass()" value="Click to remove all class"/>\n<div id="show"></div>\n<script>\n　//those can be used to an element list also\n　function testRemoveClass(){\n　　J.id("test").removeClass("test1");\n　　J.id("show").text(J.id("test").parent().html());\n　}\n　function testRemoveManyClass(){\n　　J.id("test").removeClass("test2 test3");\n　　J.id("show").text(J.id("test").parent().html());\n　}\n　function testRemoveAllClass(){\n　　J.id("test").removeClass();//or .removeClass(null)\n　　J.id("show").text(J.id("test").parent().html());\n　}\n</script>'},{title:".replaceClass()",intro:"Replace class",test:true,function:"Replace class with another if class is exists",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:String String; Return this",code:'<div>\n　<input type="button" class="test1 test2" onclick="testReplaceClass(this)" value="Click to replace class"/>\n</div>\n<div id="show">class="test1 test2"</div>\n<script>\n　function testReplaceClass(obj){\n　　obj.replaceClass("test1","replace");\n　　J.id("show").text(obj.parent().html());\n　　//this can be used to an element list also\n　}\n</script>'},{title:".toggleClass()",intro:"Toggle class",test:true,function:"Add or remove one or many class in a element or a element list",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:String('a'|'a b'); Return this",code:'<div>\n　<input type="button" class="" onclick="testToggleClass(this)" value="Click to toggle class"/>\n</div>\n<div id="show"> class=""</div>\n<script>\n　function testToggleClass(obj){\n　　obj.toggleClass("test");\n　　J.id("show").text(obj.parent().html());\n　　//this can be used to an element list also\n　}\n</script>'},{title:".text()",intro:"Set or Get text",test:true,function:"Set or Get text in HTMLElement except input and textArea",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:String|null; Return this|String|Array",code:'<div id="show">show</div>\n<input type="button" onclick="testText(this)" value="Change text"/>\n<br/>\n<div class="test">show1</div>\n<div class="test">show2</div>\n<div class="test">show3</div>\n<input type="button" onclick="testGetList()" value="Get test of list"/>\n<input type="button" onclick="testList()" value="set test of list"/>\n<script>\n　function testText(obj){\n　　var text=J.id("show").text();//get\n　　J.id("show").text(text+" change");//set\n　　//this can be used to an element list also\n　}\n　function testGetList(){\n　　J.id("show").text(J.class("test").text());\n　}\n　function testList(){\n　　J.class("test").text("change");\n　}\n</script>'},{title:".val()",intro:"Set or Get value",test:true,function:"Set or Get text in input or textArea",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:String|null; Return this|String|Array",code:'<input type="text" id="show" value="show"/>\n<input type="button" onclick="testVal(this)" value="Change value"/>\n<br/>\n<input type="text" class="test" value="show1"/>\n<input type="text" class="test" value="show2"/>\n<input type="text" class="test" value="show3"/>\n<input type="button" onclick="testGetList()" value="Get value of list"/>\n<input type="button" onclick="testList()" value="set value of list"/>\n<script>\n　function testVal(obj){\n　　var text=J.id("show").val();//get\n　　J.id("show").val(text+" change");//set\n　　//this can be used to an element list also\n　}\n　function testGetList(){\n　　J.id("show").val(J.class("test").val());\n　}\n　function testList(){\n　　J.class("test").val("change");\n　}\n</script>'},{title:".content()",intro:"Set or get value or text",test:true,function:"Set or get value or text based on the type of HTMLElement",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:String|null; Return this|String|Array",code:'<input type="text" class="test-show" value="show"/>\n<input type="button" onclick="testContent(this)" value="Change content"/>\n<br/>\n<input type="text" class="test" value="show1"/>\n<div class="test">show2</div>\n<input type="button" onclick="testGetList()" value="Get content of list"/>\n<input type="button" onclick="testList()" value="set content of list"/>\n<script>\n　function testContent(obj){\n　　var content=J.class("test-show").content();//get\n　　J.class("test-show").content(content+" change");//set\n　　//this can be used to an element list also\n　}\n　function testGetList(){\n　　J.class("test-show").content(J.class("test").content());\n　}\n　function testList(){\n　　J.class("test").content("change");\n　}\n</script>'},{title:".html()",intro:"Set or get html",test:true,function:"Set or get html of HTMLElement",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:String|null; Return this|String|Array",code:'<div id="test">\n　<input type="text" value="show1"/>\n</div>\n<input type="button" onclick="testGet()" value="Get html"/>\n<input type="button" onclick="testSet()" value="Set html"/>\n<div id="show"/>\n<script>\n　function testGet(){\n　　var text=J.id("test").html();//get\n　　J.id("show").text(text);\n　　//this can be used to an element list also ,return an array\n　}\n　function testSet(){\n　　J.id("test").html("<span>new one</span>");\n　　//this can be used to an element list also, set every element\n　}\n</script>'},{title:".event()",intro:"Set event",test:true,function:"Set event of one or many elements",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:String String|String Function|JSON; Return this",code:'<input type="text" id="test1" value="not have event"/>\n<input type="text" id="test2" value="not have event"/>\n<input type="button" onclick="addSingleByStr()" value="set single event by String"/>\n<input type="button" onclick="addSingleByFun()" value="set single event by function"/>\n<input type="button" onclick="addMany()" value="Set many events"/>\n<div id="show"/>\n<script>\n　//those can be used to an element list also\n　function addSingleByStr(){\n　　J.id("test1").event("onclick","alert(1)").val("have click event");\n　}\n　function addSingleByFun(){\n　　J.id("test1").event("onmousemove",function(){\n　　　J.id("test1").val("I said I have");\n　　}).val("have click mouse move");\n　}\n　function addMany(){\n　　J.id("test2").event({\n　　　onclick:function(){J.id("test2").val("You clicked me")},\n　　　onmouseleave:function(){J.id("test2").val("Mouse leave")}\n　　}).val("Have onclick and onmouseleave");\n　}\n</script>'},{title:".offset()",intro:"Get offset",test:true,function:"Return a json includes top,left,height,width of an HTMLElement,top and left is the relative position of this nearest parent which position=absolute or relative or fixed",howUse:"Obj:HTMLElement; Parameter:null; Return JSON(int)",code:'<div style="position:relative">\n　<input type="button" onclick="viewOffset(this)" value="View my offset"/>\n　<br/>\n　<input type="button" onclick="viewOffset(this)" style="margin-left:20px" value="View my offset"/>\n</div>\n<div id="show"/>\n<script>\n　function viewOffset(obj){\n　　J.id("show").text(JSON.stringify(obj.offset()));\n　}\n</script>'},{title:".left()",intro:"Get left",test:true,function:"Return left of this relative position,the same as offset().left",howUse:"Obj:HTMLElement; Parameter:null; Return int",code:'<div style="position:relative">\n　<input type="button" onclick="viewOffset(this)" value="View my offset"/>\n　<br/>\n　<input type="button" onclick="viewOffset(this)" style="margin-left:20px" value="View my left"/>\n</div>\n<div id="show"/>\n<script>\n　function viewOffset(obj){\n　　J.id("show").text(obj.left());\n　}\n</script>'},{title:".top()",intro:"Get top",test:true,function:"Return top of this relative position,the same as offset().top",howUse:"Obj:HTMLElement; Parameter:null; Return int",code:'<div style="position:relative">\n　<input type="button" onclick="viewOffset(this)" value="View my offset"/>\n　<br/>\n　<input type="button" onclick="viewOffset(this)" style="margin-left:20px" value="View my top"/>\n</div>\n<div id="show"/>\n<script>\n　function viewOffset(obj){\n　　J.id("show").text(obj.top());\n　}\n</script>'},{title:".height()",intro:"Get height",test:true,function:"Return height of this relative position,the same as offset().height",howUse:"Obj:HTMLElement; Parameter:null; Return int",code:'<div style="position:relative">\n　<input type="button" onclick="viewOffset(this)" value="View my offset"/>\n　<br/>\n　<input type="button" onclick="viewOffset(this)" style="margin-left:20px" value="View my height"/>\n</div>\n<div id="show"/>\n<script>\n　function viewOffset(obj){\n　　J.id("show").text(obj.height());\n　}\n</script>'},{title:".width()",intro:"Get width",test:true,function:"Return width of this relative position,the same as offset().width",howUse:"Obj:HTMLElement; Parameter:null; Return int",code:'<div style="position:relative">\n　<input type="button" onclick="viewOffset(this)" value="View my offset"/>\n　<br/>\n　<input type="button" onclick="viewOffset(this)" style="margin-left:20px" value="View my width"/>\n</div>\n<div id="show"/>\n<script>\n　function viewOffset(obj){\n　　J.id("show").text(obj.width());\n　}\n</script>'},{title:".scroll()",intro:"Scroll an element",test:true,function:"Scroll a HTMLElement or body in vertical with a distance,or get scroll top of a HTMLElement or body",howUse:"Obj:HTMLElement; Parameter:int[Function|String][int|String](distance,callback,speed)|null; Return:this|int",code:'<input type="button" onclick="textScroll(50)" value="body scroll 50px"/>\n<input type="button" onclick="textScroll(-50)" value="body scroll -50px"/>\n<input type="button" onclick="textScrollCallback()" value="add callback"/>\n<input type="button" onclick="textScrollSpeed()" value="add speed"/>\n<input type="button" onclick="textScrollCS()" value="add callback and speed fast"/>\n<input type="button" onclick="textScrollCSInt()" value="add callback and speed 300"/>\n<script>\n　function textScroll(d){\n　　J.tag("body").scroll(d);\n　}\n　function textScrollCallback(){\n　　J.tag("body").scroll(100,function(obj){\n　　　alert("scroll");////obj is this\n　　});\n　　//or use string "alert("scroll")" replace function\n　}\n　function textScrollSpeed(){\n　　J.tag("body").scroll(-100,null,100);\n　　//or use string "alert("scroll")" replace function\n　}\n　function textScrollCS(){\n　　J.tag("body").scroll(100,function(obj){\n　　　alert("scroll");//obj is this\n　　},"fast");\n　}\n　function textScrollCSInt(){\n　　J.tag("body").scroll(-100,function(obj){\n　　　alert("scroll");////obj is this\n　　}},300);\n　}\n</script>'},{title:".scrollTo()",intro:"Scroll an element",test:true,function:"Scroll an HTMLElement or body in vertical to a position by a value",howUse:"Obj:HTMLElement; Parameter:int[Function|String][int|String](posY,callback,speed); Return:this",code:'<input type="button" onclick="textScrollTo()" value="body scroll to top 300px"/>\n<script>\n　function textScrollTo(){\n　　J.tag("body").scrollTo(300,"alert(300)","fast");\n　　//Opitional parameters is the same as scroll\n　}\n</script>'},{title:".scrollX()",intro:"Scroll an element",test:true,function:"Scroll a HTMLElement or body in horizontal with a distance,or get scroll left of a HTMLElement or body",howUse:"Obj:HTMLElement; Parameter:int[Function|String][int|String](distance,callback,speed)|null; Return:this|int",code:'<input type="button" onclick="textScroll(this)" style="width:1000px;text-align:left" value="this parent scrollX 100px"/>\n<script>\n　function textScroll(obj){\n　　obj.parent().scrollX(100);\n　　//Opitional parameters is the same as scroll\n　}\n</script>'},{title:".scrollXTo()",intro:"Scroll an element",test:true,function:"Scroll an HTMLElement or body in horizontal to a position by a value",howUse:"Obj:HTMLElement; Parameter:int[Function|String][int|String](posX,callback,speed); Return:this",code:'<input type="button" onclick="textScrollXTo(this)" style="width:1000px;text-align:left" value="this parent scrollX to top 200px"/>\n<script>\n　function textScrollXTo(obj){\n　　obj.parent().scrollXTo(200,"alert(200)","fast");\n　　//Opitional parameters is the same as scroll\n　}\n</script>'},{title:".copy()",intro:"Copy content",test:true,function:"Copy value of text of a HTMLElement(May not supported in some browser)",howUse:"Obj:HTMLElement; Parameter:null; Return:Boolean(success or not)",code:'<input type="text" value="test1 content"/>\n<input type="button" onclick="testCopy(this)" value="copy"/>\n<div>test2 content</div>\n<input type="button" onclick="testCopy(this)" value="copy"/>\n<input type="text" placeholder="Ctrl+v on me"/>\n<div id="show"></div>\n<script>\n　function testCopy(obj){\n　　if(obj.prev().copy()){\n　　　J.id("show").text("copy success:"+obj.prev().content());\n　　}else{\n　　　J.id("show").text("Broswer not support");\n　　}\n　}\n</script>'},{title:".copyHtml()",intro:"Copy html",test:true,function:"Copy inner html of a HTMLElement(May not supported in some browser)",howUse:"Obj:HTMLElement; Parameter:null; Return:Boolean(success or not)",code:'<div>\n　<input type="button" onclick="testCopyHtml(this)" value="copy html"/>\n</div>\n<input type="text" placeholder="Ctrl+v on me"/>\n<div id="show"/>\n<script>\n　function testCopyHtml(obj){\n　　if(obj.parent().copyHtml()){\n　　　J.id("show").text("copy success:"+obj.parent().html());\n　　}else{\n　　　J.id("show").text("Broswer not support");\n　　}\n　}\n</script>'},{title:".animate()",intro:"Animate HTMLElement",test:true,function:"Animate HTMLElement by css",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:JSON[Function|String][int|String][String](css,callback,speed,timing); Return:this",code:'<input type="text" id="test" value="test"/>\n<input type="button" onclick="testAnimate()" value="test animate default"/>\n<input type="button" onclick="testAnimateByPlus()" value="test animate by += default"/>\n<input type="button" onclick="testAnimateCallback()" value="test animate with callback"/>\n<input type="button" onclick="testAnimateSpeed()" value="test animate with speed"/>\n<input type="button" onclick="testAnimateTiming()" value="test animate with timing"/>\n<input type="button" onclick="testAnimateAll()" value="test animate with all"/>\n<script>\n　//You can use those to a element list\n　function testAnimate(){\n　　J.id("test").animate({"background-color":"#f00"});\n　}\n　function testAnimateByPlus(){\n　　J.id("test").animate({"height":"+=100px"});\n　}\n　function testAnimateCallback(){\n　　J.id("test").animate({"width":"+=100px"},function(obj){\n　　　obj.val("callback");//obj is this\n　　});\n　　//You can use String to replace Function ,such as "alert(0)"\n　}\n　function testAnimateSpeed(){\n　　J.id("test").animate({"background-color":"#0f0"},null,"fast");\n　　//speed can be a certain String or int(microsecond)\n　}\n　function testAnimateTiming(){\n　　J.id("test").animate({"background-color":"#00f"},null,null,"ease");\n　}\n　function testAnimateAll(){\n　　J.id("test").animate({"height":"650px"},"alert(0)",3000,"linear");\n　　//speed can be a certain String or int(microsecond)\n　}\n</script>'},{title:".rotate()",intro:"Rotate HTMLElement",test:true,function:"Rotate HTMLElement by deg",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:int[Function|String][int|String][String](deg,callback,speed,origin,timing); Return:this",code:'<input type="text" style="height:100px;width:100px;margin:60px;display:blcok" id="test" value="test"/>\n<input type="button" onclick="testRotate()" value="test rotate default"/>\n<input type="button" onclick="testRotateCallback()" value="test rotate with callback"/>\n<input type="button" onclick="testRotateSpeed()" value="test rotate with speed"/>\n<input type="button" onclick="testRotateOrigin()" value="test rotate with origin"/>\n<input type="button" onclick="testRotateTiming()" value="test rotate with timing"/>\n<input type="button" onclick="testRotateAll()" value="test rotate with all"/>\n<script>\n　//You can use those to a element list\n　function testRotate(){\n　　J.id("test").rotate(30);\n　}\n　function testRotateCallback(){\n　　J.id("test").rotate(60,function(obj){\n　　　obj.val("callback");//obj is this\n　　});\n　　//You can use String to replace Function ,such as "alert(0)"\n　}\n　function testRotateSpeed(){\n　　J.id("test").rotate(90,null,"fast");\n　}\n　function testRotateOrigin(){\n　　J.id("test").rotate(120,null,null,"bottom left");\n　　//speed can be a certain String or int(microsecond)\n　}\n　function testRotateTiming(){\n　　J.id("test").rotate(150,null,null,null,"ease");\n　}\n　function testRotateAll(){\n　　J.id("test").rotate(190,"alert(0)",3000,"bottom right","linear");\n　　//speed can be a certain String or int(microsecond)\n　}\n</script>'},{title:".spin()",intro:"Spin HTMLElement",test:true,function:"Spin HTMLElement infinitely or by times",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:(int|String)[int][String][Function|String][String](speed,times,origin,callback,timing); Return:this",code:'<input type="text" style="height:100px;width:100px;margin:60px;display:blcok" id="test" value="test"/>\n<input type="button" onclick="testSpin()" value="test Spin default"/>\n<input type="button" onclick="testSpinSpeed()" value="test Spin speed"/>\n<input type="button" onclick="testSpinTimes()" value="test Spin with times"/>\n<input type="button" onclick="testSpinOrigin()" value="test Spin with origin"/>\n<input type="button" onclick="testSpinCallback()" value="test Spin with callback"/>\n<input type="button" onclick="testSpinTiming()" value="test Spin with timing"/>\n<input type="button" onclick="testSpinAll()" value="test Spin with all"/>\n<input type="button" onclick="testStopSpin()" value="stop"/>\n<script>\n　//You can use those to a element list\n　function testSpin(){\n　　J.id("test").spin();\n　}\n　function testSpinSpeed(){\n　　J.id("test").spin("fast");\n　　//speed can be a certain String or int(microsecond)\n　}\n　function testSpinTimes(){\n　　J.id("test").spin(null,2);\n　}\n　function testSpinOrigin(){\n　　J.id("test").spin(null,null,"top right");\n　}\n　function testSpinCallback(){\n　　J.id("test").spin(null,1,null,function(obj){\n　　　obj.val("callback");//obj is this\n　　});\n　　//You can use String to replace Function ,such as "alert(0)"\n　}\n　function testSpinTiming(){\n　　J.id("test").spin(null,null,null,null,"ease");\n　}\n　function testSpinAll(){\n　　J.id("test").spin(1000,2,"alert(0)","bottom right","linear");\n　　//speed can be a certain String or int(microsecond)\n　}\n　function testStopSpin(){\n　　J.id("test").stopSpin();\n　}\n</script>'},{title:".stopSpin()",intro:"Stop spin",test:true,function:"Stop spin HTMLElement",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:null; Return:this",code:'<input type="text" style="height:100px;width:100px;margin:60px;display:blcok" id="test" value="test"/>\n<input type="button" onclick="testSpin()" value="test Spin"/>\n<input type="button" onclick="testStopSpin()" value="test stop Spin"/>\n<script>\n　//You can use those to a element list\n　function testSpin(){\n　　J.id("test").spin();\n　}\n　function testStopSpin(){\n　　J.id("test").stopSpin();\n　}\n</script>'},{title:".scale()",intro:"Scale HTMLElement both",test:true,function:"Scale HTMLElement both width and height by a rate",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:Float[Function|String][int|String][String](rate,callback,speed,timing); Return:this",code:'<input type="text" style="height:50px;width:50px;margin:50px;display:blcok" id="test" value="test"/>\n<br/>\n<input type="button" onclick="testScale()" value="test scale default"/>\n<input type="button" onclick="testScalecallback()" value="test scale with callback"/>\n<input type="button" onclick="testScalespeed()" value="test scale with speed"/>\n<input type="button" onclick="testScaletiming()" value="test scale with timing"/>\n<input type="button" onclick="testScaleAll()" value="test scale all"/>\n<script>\n　//You can use those to a element list\n　function testScale(){\n　　J.id("test").scale(2);\n　}\n　function testScalecallback(){\n　　J.id("test").scale(3,function(obj){\n　　　obj.val("callback");\n　　});\n　}\n　function testScalespeed(){\n　　J.id("test").scale(2.5,null,"fast");\n　}\n　function testScaletiming(){\n　　J.id("test").scale(3.5,null,null,"ease");\n　}\n　function testScaleAll(){\n　　J.id("test").scale(1.5,"alert(0)",500,"linear");\n　}\n</script>'},{title:".scaleX()",intro:"Scale HTMLElement width",test:true,function:"Scale HTMLElement width by a rate",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:Float[Function|String][int|String][String](rate,callback,speed,timing); Return:this",code:'<input type="text" style="height:50px;width:50px;margin:50px;display:blcok" id="test" value="test"/>\n<br/>\n<input type="button" onclick="testScaleX()" value="test scaleX default"/>\n<script>\n　//You can use those to a element list\n　function testScaleX(){\n　　J.id("test").scaleX(2);\n　　//optional parameters is the same as scale\n　}\n</script>'},{title:".scaleY()",intro:"Scale HTMLElement height",test:true,function:"Scale HTMLElement height by a rate",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:Float[Function|String][int|String][String](rate,callback,speed,timing); Return:this",code:'<input type="text" style="height:50px;width:50px;margin:50px;display:blcok" id="test" value="test"/>\n<br/>\n<input type="button" onclick="testScaleY()" value="test scaleY default"/>\n<script>\n　//You can use those to a element list\n　function testScaleY(){\n　　J.id("test").scaleY(2);\n　　//optional parameters is the same as scale\n　}\n</script>'},{title:".slideUp()",intro:"Show HTMLElement",test:true,function:"Show HTMLElement in a form of slide",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:[Function|String][int|String][String](callback,speed,timing); Return:this",code:'<div style="height:50px;width:100%;background-color:#333;color:#fff" id="test">test</div>\n<br/>\n<input type="button" onclick="testSlideUp()" value="test slideUp default"/>\n<input type="button" onclick="testSlideUpcallback()" value="test slideUp with callback"/>\n<input type="button" onclick="testSlideUpspeed()" value="test slideUp with speed"/>\n<input type="button" onclick="testSlideUptiming()" value="test slideUp with timing"/>\n<input type="button" onclick="testSlideUpall()" value="test slideUp with all"/>\n<br/>\n<input type="button" onclick="resetSlide()" value="reset"/>\n<script>\n　//You can use those to a element list\n　function testSlideUp(){\n　　J.id("test").slideUp();\n　}\n　function testSlideUpcallback(){\n　　J.id("test").slideUp(function(obj){\n　　　obj.text("callback");\n　　});\n　　//You can use String to replace Function ,such as "alert(0)"\n　}\n　function testSlideUpspeed(){\n　　J.id("test").slideUp(null,100);\n　　//speed can be a certain String or int(microsecond)\n　}\n　function testSlideUptiming(){\n　　J.id("test").slideUp(null,null,"ease");\n　}\n　function testSlideUpall(){\n　　J.id("test").slideUp("alert(0)",100,"linear");\n　}\n　function resetSlide(){\n　　J.id("test").slideDown();\n　}\n</script>'},{title:".slideDown()",intro:"Hide HTMLElement",test:true,function:"Hide HTMLElement in a form of slide",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:[Function|String][int|String][String](callback,speed,timing); Return:this",code:'<div style="height:50px;width:100%;background-color:#333;color:#fff" id="test">test</div>\n<br/>\n<input type="button" onclick="testSlideUp()" value="slideUp"/>\n<input type="button" onclick="testSlideDown()" value="slideDown"/>\n<script>\n　//You can use those to a element list\n　function testSlideUp(){\n　　J.id("test").slideUp();\n　}\n　function testSlideDown(){\n　　J.id("test").slideDown();\n　　//optional parameters is the same as slideUp()\n　}\n</script>'},{title:".slideToggle()",intro:"Show or hide HTMLElement",test:true,function:"Show or hide HTMLElement in a form of slide",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:[Function|String][int|String][String](callback,speed,timing); Return:this",code:'<div style="height:50px;width:100%;background-color:#333;color:#fff" id="test">test</div>\n<br/>\n<input type="button" onclick="testSlideToggle()" value="slideToggle"/>\n<script>\n　//You can use those to a element list\n　function testSlideToggle(){\n　　J.id("test").slideToggle();\n　　//optional parameters is the same as slideUp()\n　}\n</script>'},{title:".fadeOut()",intro:"Show HTMLElement",test:true,function:"Show HTMLElement in a form of fade",howUse:"howUse",code:'<div style="height:50px;width:100%;background-color:#333;color:#fff" id="test">test</div>\n<br/>\n<input type="button" onclick="testfadeOut()" value="fadeOut"/>\n<input type="button" onclick="testfadeIn()" value="fadeIn"/>\n<script>\n　//You can use those to a element list\n　function testfadeOut(){\n　　J.id("test").fadeOut();\n　　//optional parameters is the same as slideUp()\n　}\n　function testfadeIn(){\n　　J.id("test").fadeIn();\n　　//optional parameters is the same as slideUp()\n　}\n</script>'},{title:".fadeIn()",intro:"Hide HTMLElement",test:true,function:"Hide HTMLElement in a form of fade",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:[Function|String][int|String][String](callback,speed,timing); Return:this",code:'<div style="height:50px;width:100%;background-color:#333;color:#fff" id="test">test</div>\n<br/>\n<input type="button" onclick="testfadeOut()" value="fadeOut"/>\n<input type="button" onclick="testfadeIn()" value="fadeIn"/>\n<script>\n　//You can use those to a element list\n　function testfadeOut(){\n　　J.id("test").fadeOut();\n　　//optional parameters is the same as slideUp()\n　}\n　function testfadeIn(){\n　　J.id("test").fadeIn();\n　　//optional parameters is the same as slideUp()\n　}\n</script>'},{title:".fadeToggle()",intro:"Show or hide HTMLElement",test:true,function:"Show or hide HTMLElement in a form of fade",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:[Function|String][int|String][String](callback,speed,timing); Return:this",code:'<div style="height:50px;width:100%;background-color:#333;color:#fff" id="test">test</div>\n<br/>\n<input type="button" onclick="testFadeToggle()" value="fadeToggle"/>\n<script>\n　//You can use those to a element list\n　function testFadeToggle(){\n　　J.id("test").fadeToggle();\n　　//optional parameters is the same as slideUp()\n　}\n</script>'},{title:".hide()",intro:"Hide HTMLElement",test:true,function:"Hide HTMLElement",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:null; Return:this",code:'<div style="height:50px;width:100%;background-color:#333;color:#fff" id="test">test</div>\n<br/>\n<input type="button" onclick="testhide()" value="hide"/>\n<input type="button" onclick="testshow()" value="show"/>\n<script>\n　//You can use those to a element list\n　function testhide(){\n　　J.id("test").hide();\n　}\n　function testshow(){\n　　J.id("test").show();\n　}\n</script>'},{title:".show()",intro:"Show HTMLElement",test:true,function:"Show HTMLElement",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:null; Return:this",code:'<div style="height:50px;width:100%;background-color:#333;color:#fff" id="test">test</div>\n<br/>\n<input type="button" onclick="testhide()" value="hide"/>\n<input type="button" onclick="testshow()" value="show"/>\n<script>\n　//You can use those to a element list\n　function testhide(){\n　　J.id("test").hide();\n　}\n　function testshow(){\n　　J.id("test").show();\n　}\n</script>'},{title:".showToggle()",intro:"Show or hide HTMLElement",test:true,function:"Show or hide HTMLElement",howUse:"Obj:HTMLElement|HTMLCollection|NodeList; Parameter:null; Return:this",code:'<div style="height:50px;width:100%;background-color:#333;color:#fff" id="test">test</div>\n<br/>\n<input type="button" onclick="testshowToggle()" value="showToggle"/>\n<script>\n　//You can use those to a element list\n　function testshowToggle(){\n　　J.id("test").showToggle();\n　}\n</script>'},{title:"J.ajax()",intro:"Send ajax request",test:false,function:"Send ajax request",howUse:"parameter:Json",code:'<script>\n　J.ajax({\n　　type: "", \n　　url: "",\n　　data: "",\n　　contentType: "",\n　　dataType: "",\n　　async: Boolean,\n　　success: function(data){\n　　　\n　　},\n　　error: function (err) {\n　　　\n　　}\n　});\n</script>'},{title:"J.jsonp()",intro:"Cross-domain request",test:false,function:"Cross-domain request by jsonp",howUse:"parameter:Json",code:'<script>\n　J.jsonp({\n　　url:"",\n　　data:{},\n　　dataType:"",\n　　time:int,\n　　success:function(data){\n　　　\n　　},\n　　timeout:function(err){\n　　　\n　　}\n　});\n</script>'},{title:"J.cookie()",intro:"Set or get cookie",test:true,function:"Set or get cookie",howUse:"Parameter:String[String][int][String](name,value,expires,path);",code:'<input type="button" value="set cookie" onclick="setCookie()"/>\n<input type="button" value="get cookie" onclick="getCookie()"/>\n<input type="button" value="set cookie with expires" onclick="setCookieExp()"/>\n<input type="button" value="set cookie with path" onclick="getCookiePath()"/>\n<input type="button" value="clear cookie" onclick="clearCookie()"/>\n<div id="show"></div>\n<script>\n　function setCookie(){\n　　J.cookie("myCookie","cookie");\n　　J.id("show").text("myCookie=cookie")\n　}\n　function getCookie(){\n　　var value=J.cookie("myCookie");\n　　J.id("show").text(value);\n　}\n　function setCookieExp(){\n　　J.cookie("myCookie","cookie",3);\n　　J.id("show").text("myCookie=cookie")\n　　//3 days,default is after this conversation\n　}\n　function setCookiePath(){\n　　J.cookie("myCookie","cookie",null,"/path");\n　　J.id("show").text("myCookie=cookie")\n　　//set cookie worked in a path,default is "/"\n　}\n　function clearCookie(){\n　　J.cookie("myCookie",null);\n　　//set cookie worked in a path,default is "/"\n　}\n</script>'}],Serialize:[{title:"Jet.get(HTMLElement)",intro:"Get values",test:true,function:"Get values of a HTMLElement's children which has jet-name attribute",howUse:"Parameter:HTMLElement; Return:Json;(jetForm,type,name)",code:'<div id="test">\n　<input type="text" jet-name="name" placeholder="Input name please"/>\n　<input type="password" jet-name="password" placeholder="Input password please" />\n　<input type="text" jet-name="birthday" placeholder="Input birthday please" />\n　<div jet-name="species">human</div>\n</div>\n<input type="button" value="get values" onclick="getTest()"/>\n<div id="show"></div>\n<script>function getTest(){\n　var json=Jet.get(J.id("test"));\n　J.id("show").text("The values of [form] is:"+JSON.stringify(json));\n}\n</script>'},{title:"Jet.get(jet-form)",intro:"Get values",test:true,function:"Get values of a jet-form's children which has jet-name attribute",howUse:"Parameter:String(jet-form); Return:Json",code:'<div jet-form="test">\n　<input type="text" jet-name="name" placeholder="Input name please"/>\n　<input type="password" jet-name="password" placeholder="Input password please" />\n　<input type="text" jet-name="birthday" placeholder="Input birthday please" />\n</div>\n<input type="button" value="get values" onclick="getTest()"/>\n<div id="show"></div>\n<script>function getTest(){\n　var json=Jet.get("test");\n　J.id("show").text("The values of [form] is:"+JSON.stringify(json));\n}\n</script>'},{title:"Jet.get(json)",intro:"Get values",test:true,function:"Get values as Json",howUse:"Parameter:String(jet-form)|HTMLElement; Return:Json",code:'<div jet-form="test">\n　<input type="text" jet-name="name" placeholder="Input name please"/>\n　<input type="password" jet-name="password" placeholder="Input password please" />\n　<input type="text" jet-name="birthday" placeholder="Input birthday please" />\n</div>\n<input type="button" value="get values" onclick="getTest()"/>\n<div id="show"></div>\n<script>function getTest(){\n　var json=Jet.get("test","json");//json is the default type\n　J.id("show").text("The values of [form] is:"+JSON.stringify(json));\n}\n</script>'},{title:"Jet.get(FormData)",intro:"Get values",test:true,function:"Get values as FormData",howUse:"Parameter:String(jet-form)|HTMLElement; Return:Json|FormData",code:'<div jet-form="test">\n　<input type="text" jet-name="name" placeholder="Input name please"/>\n　<input type="password" jet-name="password" placeholder="Input password please" />\n　<input type="text" jet-name="birthday" placeholder="Input birthday please" />\n</div>\n<input type="button" value="get values" onclick="getTest()"/>\n<div id="show"></div>\n<script>function getTest(){\n　var formData=Jet.get("test","FormData");\n　J.id("show").text("The values of [form] is:name="+formData.get("name")+";password="+formData.get("password")+";birthday="+formData.get("birthday"));\n}\n</script>'},{title:"Jet.get(jet-name)",intro:"Get values",test:true,intro:"Get values children which has jet-name attribute",howUse:"Parameter:(String|HTMLElement)[jet-name]; Return:Json|FormData",code:'<div jet-form="test">\n　<input type="text" jet-name="name" placeholder="Input name please"/>\n　<input type="password" jet-name="password" placeholder="Input password please" />\n　<input type="text" jet-name="birthday" placeholder="Input birthday please" />\n</div>\n<input type="button" value="get values" onclick="getTest()"/>\n<div id="show"></div>\n<script>function getTest(){\n　var json=Jet.get("test");//jet-name is default attr\n　J.id("show").text("The values of [form] is:"+JSON.stringify(json));\n}\n</script>'},{title:"Jet.get(attr)",intro:"Get values",test:true,intro:"Get values children which has certain attribute",howUse:"Parameter:(String|HTMLElement)[attr]; Return:Json|FormData",code:'<div jet-form="test">\n　<input type="text" name="name" placeholder="Input name please"/>\n　<input type="password" name="password" placeholder="Input password please" />\n　<input type="text" name="birthday" placeholder="Input birthday please" />\n</div>\n<input type="button" value="get values" onclick="getTest()"/>\n<div id="show"></div>\n<script>function getTest(){\n　var json=Jet.get("test",null,"name");//any attribute\n　J.id("show").text("The values of [form] is:"+JSON.stringify(json));\n}\n</script>'},{title:"Jet.set(HTMLElement)",intro:"Set values",test:true,function:"Set values of HTMLElement which children has jet-name",howUse:"Parameter:HTMLElement,[jet-name];(jetForm,data,callback,name)",code:'<div id="test">\n　<input type="text" jet-name="name"/>\n　<input type="text" jet-name="password"/>\n　<input type="text" jet-name="birthday"/>\n　<div jet-name="species">*</div>\n</div>\n<input type="button" value="set values" onclick="setTest()"/>\n<script>\nfunction setTest(){\n　var info={\n　　name:"name test",\n　　password:"password test",\n　　birthday:"birthday test",\n　　species:"human"\n　};\n　Jet.set(J.id("test"),info);\n}\n</script>'},{title:"Jet.set(jet-form)",intro:"Set values",test:true,function:"Set values of jet-form which children has certain attribute",howUse:"Parameter:HTMLElement|String,[attr];",code:'<div jet-form="test">\n　<input type="text" jet-name="name"/>\n　<input type="text" jet-name="password"/>\n　<input type="text" jet-name="birthday"/>\n</div>\n<input type="button" value="set values" onclick="setTest()"/>\n<script>\nfunction setTest(){\n　var info={\n　　name:"name test",\n　　password:"password test",\n　　birthday:"birthday test"\n　};\n　Jet.set("test",info);\n}\n</script>'},{title:"Jet.set(json)",intro:"Set values",test:true,function:"Set values with json",howUse:"Parameter:HTMLElement|String,[Json];",code:'<div jet-form="test">\n　<input type="text" jet-name="name"/>\n　<input type="text" jet-name="password"/>\n　<input type="text" jet-name="birthday"/>\n</div>\n<input type="button" value="set values" onclick="setTest()"/>\n<script>\nfunction setTest(){\n　var info={\n　　name:"name test",\n　　password:"password test",\n　　birthday:"birthday test"\n　};\n　Jet.set("test",info);\n}\n</script>'},{title:"Jet.set(FormData)",intro:"Set values",test:true,function:"Set values with FormData",howUse:"Parameter:HTMLElement|String,[Json|FormData];",code:'<div jet-form="test">\n　<input type="text" jet-name="name"/>\n　<input type="text" jet-name="password"/>\n　<input type="text" jet-name="birthday"/>\n</div>\n<input type="button" value="set values" onclick="setTest()"/>\n<script>\nfunction setTest(){\n　var info= new FormData();\n　info.append("name","name test");\n　info.append("password","password test");\n　info.append("birthday","birthday test");\n　Jet.set("test",info);\n}\n</script>'},{title:"Jet.set(callback)",intro:"Set values",test:true,function:"Set values with callback,you can change style according to different content",howUse:"Parameter:HTMLElement|String,[Json|FormData][Function|String];",code:'<div jet-form="test">\n　<input type="text" jet-name="name"/>\n　<input type="text" jet-name="password"/>\n　<input type="text" jet-name="birthday"/>\n</div>\n<input type="button" value="set values" onclick="setTest()"/>\n<script>\nfunction setTest(){\n　var info={\n　　name:"red",\n　　password:"password test",\n　　birthday:"birthday test"\n　};\n　Jet.set("test",info,function(element,value,key){//every element will execute this function\n　　if(key=="name"&&value=="red"){\n　　　element.css("color","#f00");\n　　}\n　});\n}\n</script>'},{title:"Jet.set(jet-name)",intro:"Set values",test:true,function:"Set values of jet-form which children has jet-name",howUse:"Parameter:HTMLElement|String,[Json|FormData][Function|String]",code:'<div jet-form="test">\n　<input type="text" jet-name="name"/>\n　<input type="text" jet-name="password"/>\n　<input type="text" jet-name="birthday"/>\n</div>\n<input type="button" value="set values" onclick="setTest()"/>\n<script>\nfunction setTest(){\n　var info={\n　　name:"name test",\n　　password:"password test",\n　　birthday:"birthday test"\n　};\n　Jet.set("test",info,null,"jet-name");//jet-name is default\n}\n</script>'},{title:"Jet.set(attr)",intro:"Set values",test:true,function:"Set values of jet-form which children has certain attribute",howUse:"Parameter:HTMLElement|String,[Json|FormData][Function|String][String]",code:'<div jet-form="test">\n　<input type="text" any-attr="name"/>\n　<input type="text" any-attr="password"/>\n　<input type="text" any-attr="birthday"/>\n</div>\n<input type="button" value="set values" onclick="setTest()"/>\n<script>\nfunction setTest(){\n　var info={\n　　name:"name test",\n　　password:"password test",\n　　birthday:"birthday test"\n　};\n　Jet.set("test",info,null,"any-attr");\n}\n</script>'},{title:"Jet.clear()",intro:"Clear values",test:true,function:"Clear jet-name values of a HTMLElement of jet-form",howUse:"Parameter:HTMLElement|String,[String]",code:'<div jet-form="test" id="test">\n　<input type="text" jet-name="name" any-attr="name" value="name test"/>\n　<input type="text" jet-name="password" any-attr="password" value="password test"/>\n　<input type="text" jet-name="birthday" any-attr="birthday" value="birthday test"/>\n</div>\n<input type="button" value="clear by default" onclick="clearDefault()"/>\n<input type="button" value="clear by HTMLElement and attr" onclick="clearElementAndAttr()"/>\n<script>\nfunction clearDefault(){\n　Jet.clear("test");\n}\nfunction clearElementAndAttr(){\n　Jet.clear(J.id("test"),"any-attr");\n}\n</script>'},{title:"HTMLElement.get()",intro:"Get values",test:true,function:"Get jet-name values of a HTMLElement",howUse:"Parameter:[String],[String](dataType,attrName);Return:Json|FormData",code:'<div id="test">\n　<input type="text" jet-name="name" placeholder="Input name please"/>\n　<input type="password" jet-name="password" placeholder="Input password please" />\n　<input type="text" jet-name="birthday" placeholder="Input birthday please" />\n</div>\n<input type="button" value="get values" onclick="getTest()"/>\n<div id="show"></div>\n<script>\nfunction getTest(){\n　var json=J.id("test").get();//you can use the same parameters as Jet.get() except for the first parameter\n　J.id("show").text("The values of [form] is:"+JSON.stringify(json));\n}\n</script>'},{title:"HTMLElement.set()",intro:"Set values",test:true,function:"Set jet-name values into a HTMLElement",howUse:"Parameter:Json,[Function|String],[String](data,callback,name)",code:'<div id="test">\n　<input type="text" jet-name="name"/>\n　<input type="text" jet-name="password"/>\n　<input type="text" jet-name="birthday"/>\n</div>\n<input type="button" value="set values" onclick="setTest()"/>\n<script>\nfunction setTest(){\n　var info={\n　　name:"name test",\n　　password:"password test",\n　　birthday:"birthday test"\n　};\n　J.id("test").set(info);//you can use the same parameters as Jet.set() except for the first parameter\n}\n</script>'},{title:"HTMLElement.clear()",intro:"Clear values",test:true,function:"Clear jet-name values of a HTMLElement",howUse:"Parameter:[String]",code:'<div id="test">\n　<input type="text" jet-name="name" any-attr="name" value="name test"/>\n　<input type="text" jet-name="password" any-attr="password" value="password test"/>\n　<input type="text" jet-name="birthday" any-attr="birthday" value="birthday test"/>\n</div>\n<input type="button" value="clear by default" onclick="clearDefault()"/>\n<input type="button" value="clear by HTMLElement and attr" onclick="clearByAttr()"/>\n<script>\nfunction clearDefault(){\n　J.id("test").clear();\n}\nfunction clearByAttr(){\n　J.id("test").clear("any-attr");\n}\n</script>'},{title:"J.jetForm()",intro:"Select jet-form",test:true,function:"Select HTMLElement by jet-form attribute",howUse:"Parameter:String;return:HTMLElement;",code:'<div jet-form="test">What am I?</div>\n<input type="button" onclick="testJetForm()" value="click"/>\n<script>\n　function testJetForm(){\n　　J.jetForm("test").text("I am a jet form");\n　}\n</script>'},{title:"J.jetName()",intro:"Select jet-name",test:true,function:"Select HTMLElement by jet-name attribute",howUse:"Parameter:String,[String];return:HTMLElement|HTMLCollection|NodeList",code:'<div jet-form="form">\n　<input type="text" jet-name="test"/>\n</div>\n<input type="text" jet-name="test"/>\n<input type="button" onclick="testJetName()" value="test JetName"/>\n<input type="button" onclick="testJetNameUnderJetForm()" value="test JetName under JetForm"/>\n<script>\n　function testJetName(){\n　　J.jetName("test").val("I have jet form");\n　}\n　function testJetNameUnderJetForm(){\n　　J.jetName("form","test").val("My parent is jet form named test");\n　}\n</script>'}],Validation:[{title:"Jet.validate(HTMLElement)",intro:"Validate values",test:true,function:"Validate jet-valid values of a HTMLElement's children",howUse:"Parameter:HTMLElement|String,[Function|String],[Function|String];return:null",code:'<div id="test">\n　<input type="text" jet-valid="notnull" placeholder="Input name please"/>\n　<input type="password" jet-valid="length[4,8]" placeholder="Input password please" />\n　<input type="text" jet-valid="date" placeholder="Input birthday please" />\n</div>\n<input type="button" value="validate" onclick="validateTest()"/>\n<script>\n　function validateTest(){\n　　Jet.validate(J.id("test"));\n　}\n</script>'},{title:"Jet.validate(jet-form)",intro:"Validate values",test:true,function:"Validate jet-valid values of a jet-form's children",howUse:"Parameter:HTMLElement|String,[Function|String],[Function|String];return:null",code:'<div jet-form="test">\n　<input type="text" jet-valid="notnull" placeholder="Input name please"/>\n　<input type="password" jet-valid="length[4,8]" placeholder="Input password please" />\n　<input type="text" jet-valid="date" placeholder="Input birthday please" />\n</div>\n<input type="button" value="validate" onclick="validateTest()"/>\n<script>\n　function validateTest(){\n　　Jet.validate("test");\n　}\n</script>'},{title:"Jet.validate(onPass)",intro:"Validate callback",test:true,function:"Validate values with onPass callback",howUse:"Parameter:HTMLElement|String,[Function|String],[Function|String];return:null",code:'<div jet-form="test">\n　<input type="text" jet-valid="notnull" placeholder="Input name please"/>\n　<input type="password" jet-valid="length[4,8]" placeholder="Input password please" />\n　<input type="text" jet-valid="date" placeholder="Input birthday please" />\n</div>\n<input type="button" value="validate" onclick="validateTest()"/>\n<div id="show"></div>\n<script>\n　function validateTest(){\n　　Jet.validate("test",function(data){\n　　　J.id("show").text("Pass!");\n　　});\n　}\n</script>'},{title:"Jet.validate(onFail)",intro:"Validate callback",test:true,function:"Validate values with onFail callback",howUse:"Parameter:HTMLElement|String,[Function|String],[Function|String];return:null",code:'<div jet-form="test">\n　<input type="text" jet-valid="notnull" placeholder="Input name please"/>\n　<input type="password" jet-valid="length[4,8]" placeholder="Input password please" />\n　<input type="text" jet-valid="date" placeholder="Input birthday please" />\n</div>\n<input type="button" value="validate" onclick="validateTest()"/>\n<div id="show"></div>\n<script>\n　function validateTest(){\n　　Jet.validate("test",null,function(data){\n　　　J.id("show").text(JSON.stringify(data));\n　　　data.each(function(dataItem){\n　　　　dataItem.obj.val("from callback:"+dataItem.error);\n　　　});\n　　　//data[i].obj is the i-th unpass element\n　　　//data[i].error is the i-th unpass element error info\n　　　//data.length is unpass element number\n　　});\n　}\n</script>'},{title:"Jet.addValid()",intro:"Add Validation",test:true,function:"Add Validation into a single HTMLElement or somes jet-name in jet-form dynamically",howUse:"Parameter:HTMLElement|String(jet-form),Json|Array|String",code:'<input type="text" id="test" placeholder="Input name please"/>\n<input type="button" value="add valid single" onclick="addValidTest()"/>\n</br>\n</br>\n<div jet-form="test">\n　<input type="text" class="test" jet-name="name" placeholder="Input name please"/>\n　<input type="text" class="test" jet-name="password" placeholder="Input password please"/>\n　<input type="text" class="test" jet-name="birthday" placeholder="Input name please"/>\n</div>\n<input type="button" value="add valid many the same" onclick="addValidTestManySame()"/>\n<input type="button" value="add valid many" onclick="addValidTestMany()"/>\n<input type="button" value="add valid many by jet-form and jet-name" onclick="addValidTestManyJson()"/>\n<input type="button" value="reset" onclick="resetValid()"/>\n<div id="show"></div>\n<script>\n　function addValidTest(){\n　　Jet.addValid(J.id("test"),"notnull");\n　　J.id("show").text("Has added single");\n　}\n　function addValidTestManySame(){\n　　Jet.addValid(J.class("test"),"notnull");\n　　J.id("show").text("Has added many with the same type");\n　}\n　function addValidTestMany(){\n　　Jet.addValid(J.class("test"),["notnull","length[4,8]","date"]);\n　　J.id("show").text("Has added many with different type");\n　}\n　function addValidTestManyJson(){\n　　Jet.addValid("test",{\n　　　"name":"notnull",\n　　　"password":"length[4,8]",\n　　　"birthday":"date"\n　　});\n　　J.id("show").text("Has added many with json");\n　}\n　function resetValid(){\n　　J.jetForm("test").clearValid();\n　}\n</script>'},{title:"Jet.initValid()",intro:"Init Validation",test:true,function:"Init Validationin case of add validation dynamically",howUse:"Parameter:HTMLElement|String;return:null",code:'<div jet-form="test" id="form">\n　<input type="text" id="test" placeholder="Input name please"/>\n</div>\n<input type="button" value="add valid" onclick="addValidTest()"/>\n<input type="button" value="init valid" onclick="initValidTest()"/>\n<div id="show"></div>\n<script>\n　function addValidTest(){\n　　J.id("test").attr("jet-valid","notnull");\n　　J.id("show").text("Has added,but not effective");\n　}\n　function initValidTest(){\n　　Jet.initValid("test");//or Jet.initValid(J.id("form"));\n　　//Jet.initValid() is for all HTMLElement with jet-valid\n　　J.id("show").text("Has inited,now effective");\n　}\n</script>'},{title:"Jet.clearValid()",intro:"Clear Validation",test:true,function:"Clear Validationin of a single HTMLElement or somes jet-name in jet-form",howUse:"Parameter:HTMLElement|String;return:null",code:'<div jet-form="form">\n　<input type="text" jet-name="test" jet-valid="notnull" placeholder="Input name please"/>\n</div>\n<input type="button" value="clearValidTest" onclick="clearValidTest()"/>\n<input type="button" value="clearValidTestByForm" onclick="clearValidTestByForm()"/>\n<input type="button" value="reset" onclick="resetValid()"/>\n<div id="show"></div>\n<script>\n　function clearValidTest(){\n　　Jet.clearValid(J.jetName("test"));\n　　J.id("show").text("Has cleared");\n　}\n　function clearValidTestByForm(){//clear all jet-name elements valid under jet-form\n　　Jet.clearValid("form");\n　　J.id("show").text("Has cleared by form");\n　}\n　//You can also use a HTMLCollection or NodeList as parameter\n　function resetValid(){\n　　J.jetName("test").addValid("notnull");\n　　J.id("show").text("Has reset");\n　}\n</script>'},{title:"HTMLElement.validate()",intro:"Validation",test:true,function:"Validate a HTMLElement",howUse:"Obj:HTMLElement;Parameter:[Function|String],[Function|String];return:this",code:'<div id="test">\n　<input type="text" jet-valid="notnull" placeholder="Input name please"/>\n　<input type="password" jet-valid="length[4,8]" placeholder="Input password please" />\n　<input type="text" jet-valid="date" placeholder="Input birthday please" />\n</div>\n<input type="button" value="validate" onclick="validateTest()"/>\n<script>\n　function validateTest(){\n　　J.id("test").validate();\n　　//onpass and onfail is the same as Jet.validate()\n　}\n</script>'},{title:".addValid()",intro:"Add Validation",test:true,function:"Add Validation into a single HTMLElement or somes jet-name in jet-form dynamically",howUse:"Obj:HTMLElement|HTMLCollection|NodeList;Parameter:Json|Array|String;return:this",code:'<input type="text" id="test" placeholder="Input name please"/>\n<input type="button" value="add valid single" onclick="addValidTest()"/>\n</br></br>\n<div jet-form="test">\n　<input type="text" class="test" jet-name="name" placeholder="Input name please"/>\n　<input type="text" class="test" jet-name="password" placeholder="Input password please"/>\n　<input type="text" class="test" jet-name="birthday" placeholder="Input name please"/>\n</div>\n<input type="button" value="add valid many the same" onclick="addValidTestManySame()"/>\n<input type="button" value="add valid many" onclick="addValidTestMany()"/>\n<input type="button" value="add valid many by jet-form and jet-name" onclick="addValidTestManyJson()"/>\n<input type="button" value="reset" onclick="resetValid()"/>\n<div id="show"></div>\n<script>\n　function addValidTest(){\n　　J.id("test").addValid("notnull");\n　　J.id("show").text("Has added single");\n　}\n　function addValidTestManySame(){\n　　J.class("test").addValid("notnull");\n　　J.id("show").text("Has added many with the same type");\n　}\n　function addValidTestMany(){\n　　J.class("test").addValid(["notnull","length[4,8]","date"]);\n　　J.id("show").text("Has added many with different type");\n　}\n　function addValidTestManyJson(){\n　　J.jetForm("test").addValid({\n　　　"name":"notnull",\n　　　"password":"length[4,8]",\n　　　"birthday":"date"\n　　});\n　　J.id("show").text("Has added many with json");\n　}\n　function resetValid(){\n　　J.jetForm("test").clearValid();\n　}\n</script>'},{title:".initValid()",intro:"Init Validation",test:true,function:"Init Validationin case of add validation dynamically",howUse:"Obj:HTMLElement|HTMLCollection|NodeList;Parameter:null;return:this",code:'<div id="form">\n　<input type="text" id="test" placeholder="Input name please"/>\n</div>\n<input type="button" value="add valid" onclick="addValidTest()"/>\n<input type="button" value="init valid" onclick="initValidTest()"/>\n<div id="show"></div>\n<script>\n　function addValidTest(){\n　　J.id("test").attr("jet-valid","notnull");\n　　J.id("show").text("Has added,but not effective");\n　}\n　function initValidTest(){\n　　J.id("form").initValid();\n　　J.id("show").text("Has inited,now effective");\n　}\n</script>'},{title:".clearValid()",intro:"Clear Validation",test:true,function:"Clear Validationin of a single HTMLElement or somes jet-name in jet-form",howUse:"Obj:HTMLElement|HTMLCollection|NodeList;Parameter:null;return:this",code:'<div jet-form="form">\n　<input type="text" jet-name="test" jet-valid="notnull" placeholder="Input name please"/>\n</div>\n<input type="button" value="clearValidTest" onclick="clearValidTest()"/>\n<input type="button" value="clearValidTestByForm" onclick="clearValidTestByForm()"/>\n<input type="button" value="reset" onclick="resetValid()"/>\n<div id="show"></div>\n<script>\n　function clearValidTest(){\n　　J.jetName("test").clearValid();\n　　J.id("show").text("Has cleared");\n　}\n　function clearValidTestByForm(){//clear all jet-name elements valid under jet-form\n　　J.jetForm("form").clearValid()\n　　J.id("show").text("Has cleared by form");\n　}\n　function resetValid(){\n　　J.jetName("test").addValid("notnull");\n　　J.id("show").text("Has reset");\n　}\n</script>'},{title:"Jet.banDefault()",intro:"Disabled default",test:true,function:"Disabled default style of validation error show",howUse:"Parameter:null;",code:'<div id="test">\n　<input type="text" jet-valid="date" placeholder="Input birthday please" />\n</div>\n<input type="button" value="ban default" onclick="banDefault()"/>\n<input type="button" value="reset" onclick="reset()"/>\n<div id="show"></div>\n<script>\n　function banDefault(){\n　　Jet.banDefault();\n　　J.id("show").text("Has banned,now default style is not effective");\n　}\n　function reset(){\n　　Jet.useDefault();\n　　J.id("show").text("Has reseted");\n　}\n</script>'},{title:"Jet.useDefault()",intro:"Use default",test:true,function:"Use default style of validation error show",howUse:"Parameter:null;",code:'<div id="test">\n　<input type="text" jet-valid="date" placeholder="Input birthday please" />\n</div>\n<input type="button" value="ban default" onclick="banDefault()"/>\n<input type="button" value="use default" onclick="useDefault()"/>\n<input type="button" value="reset" onclick="reset()"/>\n<div id="show"></div>\n<script>\n　function banDefault(){\n　　Jet.banDefault();\n　　J.id("show").text("Has banned,now default style is not effective");\n　}\n　function useDefault(){\n　　Jet.useDefault();\n　　J.id("show").text("Has reused,now default style is effective");\n　}\n　function reset(){\n　　Jet.useDefault();\n　　J.id("show").text("Has reseted");\n　}\n</script>'},{title:"Jet.banValidShow()",intro:"Disabled error show",test:true,function:"Disabled default style of validation error show",howUse:"Parameter:null;",code:'<div id="test">\n　<input type="text" jet-valid="date" placeholder="Input birthday please" />\n</div>\n<input type="button" value="ban valid Show" onclick="banValidShow()"/>\n<input type="button" value="reset" onclick="reset()"/>\n<div id="show"></div>\n<script>\n　function banValidShow(){\n　　Jet.banValidShow();\n　　J.id("show").text("Has banned,now the error info not show");\n　}\n　function reset(){\n　　Jet.useValidShow();\n　　J.id("show").text("Has reseted");\n　}\n</script>'},{title:"Jet.usePlaceHolder()",intro:"Set placeholder",test:true,function:"Set valid error text placeholder",howUse:"Parameter:null;",code:'<div id="test">\n　<input type="text" jet-valid="notnull"/>\n　<input type="password" jet-valid="length[4,8]"/>\n　<input type="text" jet-valid="date"/>\n</div>\n<input type="button" value="use placeholder" onclick="usePlaceholder()"/>\n<input type="button" value="reset" onclick="reset()"/>\n<script>\n　function usePlaceholder(){\n　　Jet.usePlaceHolder();\n　}\n　function reset(){\n　　Jet.banPlaceHolder();\n　}\n</script>'},{title:"Jet.banPlaceHolder()",intro:"Disabled placeholder for valid input",test:true,function:"Not use valid error text placeholder",howUse:"Parameter:null;",code:'<div id="test">\n　<input type="text" jet-valid="notnull"/>\n　<input type="password" jet-valid="length[4,8]"/>\n　<input type="text" jet-valid="date"/>\n</div>\n<input type="button" value="use placeholder" onclick="usePlaceholder()"/>\n<input type="button" value="ban placeholder" onclick="banPlaceholder()"/>\n<script>\n　function usePlaceholder(){\n　　Jet.usePlaceHolder();\n　}\n　function banPlaceholder(){\n　　Jet.banPlaceHolder();\n　}\n</script>'},{title:"Jet.useValidShow()",intro:"Use error show",test:true,function:"Use default style of validation error show",howUse:"Parameter:null;",code:'<div id="test">\n　<input type="text" jet-valid="date" placeholder="Input birthday please" />\n</div>\n<input type="button" value="ban valid Show" onclick="banValidShow()"/>\n<input type="button" value="use valid Show" onclick="useValidShow()"/>\n<input type="button" value="reset" onclick="reset()"/>\n<div id="show"></div>\n<script>\n　function banValidShow(){\n　　Jet.banValidShow();\n　　J.id("show").text("Has banned,now the error info not show");\n　}\n　function useValidShow(){\n　　Jet.useValidShow();\n　　J.id("show").text("Has reused,now the error info show");\n　}\n　function reset(){\n　　Jet.useValidShow();\n　　J.id("show").text("Has reseted");\n　}\n</script>'},{title:"Jet.onOnePass()",intro:"Set validate single callback",test:true,function:"Set validate single pass callback ",howUse:"Parameter:Function|String;",code:'<div jet-form="test">\n　<input type="text" jet-valid="notnull" placeholder="Input please"/>\n　<input type="text" jet-valid="notnull" placeholder="Input please"/>\n　<input type="text" jet-valid="notnull" placeholder="Input please"/>\n</div>\n<input type="button" value="validate" onclick="validateTest()"/>\n<input type="button" value="onOnePass test" onclick="onOnePass()"/>\n<input type="button" value="reset" onclick="reset()"/>\n<div id="show"></div>\n<script>\n　function validateTest(){\n　　Jet.validate("test");\n　}\n　function onOnePass(){\n　　Jet.onOnePass(function(input,info){\n　　　input.val("from onOnePass:"+info);\n　　});\n　　//or use String to replace function\n　　J.id("show").text("Has used your function");\n　}\n　function reset(){\n　　Jet.onOnePass(null);\n　　J.id("show").text("Has reseted");\n　}\n</script>'},{title:"Jet.onOneFail()",intro:"Set validate single callback",test:true,function:"Set validate single fail callback ",howUse:"Parameter:Function|String;",code:'<div jet-form="test">\n　<input type="text" jet-valid="notnull" placeholder="Input please"/>\n　<input type="text" jet-valid="notnull" placeholder="Input please"/>\n　<input type="text" jet-valid="notnull" placeholder="Input please"/>\n</div>\n<input type="button" value="validate" onclick="validateTest()"/>\n<input type="button" value="onOneFail test" onclick="onOneFail()"/>\n<input type="button" value="reset" onclick="reset()"/>\n<div id="show"></div>\n<script>\n　function validateTest(){\n　　Jet.validate("test");\n　}\n　function onOneFail(){\n　　Jet.onOneFail(function(input,error){\n　　　input.val("from onOneFail:"+error);\n　　});\n　　//or use String to replace function\n　　J.id("show").text("Has used your function");\n　}\n　function reset(){\n　　Jet.onOneFail(null);\n　　J.id("show").text("Has reseted");\n　}\n</script>'},{title:".getContent()",intro:"Get value or text",test:true,function:"Get value or text of element when it is in validation",howUse:"Obj:HTMLElement|HTMLCollection|NodeList;Parameter:null;return:this",code:'<input type="text" id="test" jet-valid="date" placeholder="Input please"/>\n<input type="button" value=".val() when in valid" onclick="getVal()"/>\n<input type="button" value=".getContent() when in valid" onclick="getContentTest()"/>\n<div id="show"></div>\n<script>\n　function getVal(){\n　　var value=J.id("test").val();\n　　J.id("show").text("value="+value);\n　}\n　function getContentTest(){\n　　var value=J.id("test").getContent();\n　　J.id("show").text("content="+value);\n　}\n</script>'}],Tools:[{title:"Jet.show()",intro:"Show information note",test:true,function:"Show information note with different statu,time and callback",howUse:"Parameter:String[String][String|int][Function|String];(content,statu,time,callback)",code:'<input type="text" id="test" value="test"/>\n<input type="button" value="width content" onclick="showTest()"/>\n<input type="button" value="with statu" onclick="showTestWithStatu()"/>\n<input type="button" value="with time" onclick="showTestWithTime()"/>\n<input type="button" value="with callback" onclick="showTestWithCallback()"/>\n<input type="button" value="with all" onclick="showTestWithAll()"/>\n<script>\nfunction showTest(){\n　Jet.show(J.id("test").val());\n}\nfunction showTestWithStatu(){\n　Jet.show(J.id("test").val(),"info");\n　//success info warn error\n}\nfunction showTestWithTime(){\n　Jet.show(J.id("test").val(),null,"fast");\n}\nfunction showTestWithCallback(){\n　Jet.show(J.id("test").val(),null,null,function(){\n　　J.id("test").val("from callback");\n　});\n}\nfunction showTestWithAll(){\n　Jet.show(J.id("test").val(),"warn",1000,function(){\n　　J.id("test").val("from all");\n　});\n}\n</script>'},{title:"Jet.showWait()",intro:"Show information note",test:true,function:"Show information note not close automatically",howUse:"Parameter:String[String];(content,statu)",code:'<input type="text" id="test" value="test"/>\n<input type="button" value="width content" onclick="showTest()"/>\n<input type="button" value="with statu" onclick="showTestWithStatu()"/>\n<div id="show"></div>\n<script>\nfunction showTest(){\n　Jet.showWait(J.id("test").val());\n　J.id("show").text("This will not close automatically,click it to close");\n}\nfunction showTestWithStatu(){\n　Jet.showWait(J.id("test").val(),"error");\n　//success info warn error\n}\n</script>'},{title:"Jet.close()",intro:"Close information note box",test:true,function:"Close information note box with code",howUse:"Parameter:null",code:'<input type="text" id="test" value="test"/>\n<input type="button" value="show" onclick="showTest()"/>\n<input type="button" value="close note" onclick="closeNote()"/>\n<div id="show"></div>\n<script>\nfunction showTest(){\n　Jet.showWait(J.id("test").val());\n　J.id("show").text("This will not close automatically,click close note button to close");\n}\nfunction closeNote(){\n　Jet.close();\n}\n</script>'},{title:"Jet.setNoteStyle()",intro:"Change note style",test:true,function:"Change note style,'gray' or 'color',color is default style",howUse:"Parameter:String",code:'<input type="text" id="test" value="test"/>\n<input type="button" value="show" onclick="showTest()"/>\n<input type="button" value="set note style as gray" onclick="setGray()"/>\n<input type="button" value="reset" onclick="reset()"/>\n<div id="show"></div>\n<script>\nfunction showTest(){\n　Jet.show(J.id("test").val());\n}\nfunction setGray(){\n　Jet.setNoteStyle("gray");\n}\nfunction reset(){\n　Jet.setNoteStyle("color");\n}\n</script> '},{title:"Jet.confirm(onOk)",intro:"Show a confirm box",test:true,function:"Show a confirm box with ok callback",howUse:"Parameter:String[Function|String][Function|String];(title,onOk,onCancel)",code:'<input type="button" value="With onOk callback" onclick="showConfirm()"/>\n<div id="show"></div>\n<script>\nfunction showConfirm(){\n　Jet.confirm("Are you sure?",function(){\n　　J.id("show").text("You choose ok");\n　});\n}\n</script> '},{title:"Jet.confirm(onCancel)",intro:"Show a confirm box",test:true,function:"Show a confirm box with cancel callback",howUse:"Parameter:String[Function|String][Function|String];(title,onOk,onCancel)",code:'<input type="button" value="With onCancel callback" onclick="showConfirm()"/>\n<input type="button" value="With both" onclick="showBoth()"/>\n<div id="show"></div>\n<script>\nfunction showConfirm(){\n　Jet.confirm("Are you sure?",null,function(){\n　　J.id("show").text("You choose cancel");\n　});\n}\nfunction showBoth(){\n　Jet.confirm("Are you sure?",function(){\n　　J.id("show").text("You choose ok");\n　},function(){\n　　J.id("show").text("You choose cancel");\n　});\n}\n</script>'},{title:"Jet.input(single)",intro:"Show a input box",test:true,function:"Show a input box with single input",howUse:"Parameter:(String|Array|Json)[Function|String][Function|String];(data,onOk,onCancel)",code:'<input type="button" value="Single input with default" onclick="showSingle()"/>\n<input type="button" value="Single input with values" onclick="showSingleWithValue()"/>\n<script>\nfunction showSingle(){\n　Jet.input("My Information");//null equals "Input Information"\n}\nfunction showSingleWithValue(){\n　Jet.input(["My Information","Information text","default value","date"]);\n　//[box title,input title,default value,valid type]\n　//if you donot want to use any of them,use null to replace it\n　//and you can use less than four parameters \n}\n</script>'},{title:"Jet.input(many)",intro:"Show a input box",test:true,function:"Show a input box with many inputs",howUse:"Parameter:(String|Array|Json)[Function|String][Function|String];(data,onOk,onCancel)",code:'<input type="button" value="Many inputs with json" onclick="showManyWithJson()"/>\n<script>\nfunction showManyWithJson(){\n　Jet.input({\n　　title:"My Information",\n　　text:[null,"Information text2","Information text3"],\n　　default:["default value1",null,"default value3"],\n　　valid:["number","date",null]\n　});\n　//you can remove attribute if you donot use it\n}\n</script>'},{title:"Jet.input(onOk)",intro:"Show a input box",test:true,function:"Show a input box with onOk callback",howUse:"Parameter:(String|Array|Json)[Function|String][Function|String];(data,onOk,onCancel)",code:'<input type="button" value="Single input with ok callback" onclick="testOkCallback()"/>\n<input type="button" value="Many inputs with ok callback" onclick="testOkCallbackWithMany()"/>\n<div id="show"></div>\n<script>\nfunction testOkCallback(){\n　Jet.input("My Information",function(data){//Is String\n　　J.id("show").text("Data is:"+data);\n　});\n}\nfunction testOkCallbackWithMany(){\n　Jet.input({\n　　title:"My Information",\n　　text:[null,"Information text2","Information text3"],\n　　default:["default value1",null,"default value3"],\n　　valid:["number","date",null]\n　},function(data){//Is Array\n　　J.id("show").text("Data is:["+data+"]");\n　});\n}\n</script>'},{title:"Jet.input(onCancel)",intro:"Show a input box",test:true,function:"Show a input box with onCancel callback",howUse:"Parameter:(String|Array|Json)[Function|String][Function|String];(data,onOk,onCancel)",code:'<input type="button" value="With cancel callback" onclick="testCancelCallback()"/>\n<div id="show"></div>\n<script>\nfunction testCancelCallback(){\n　Jet.input("My Information",null,function(){//Is String\n　　J.id("show").text("Canceled");\n　});\n}\n</script>'},{title:"Jet.checkArg()",intro:"Check argument",test:true,function:"Check argument,if is null or undefined,return a default value",howUse:"Parameter:Object,Object(default);return:Object;",code:'<input type="button" value="Check undefined" onclick="checkUndefined()"/>\n<input type="button" value="Check null" onclick="checkNull()"/>\n<input type="button" value="Check normal" onclick="checkNormal()"/>\n<div id="show"></div>\n<script>\nvar a,b=null,c="normal";\nfunction checkUndefined(){\n　J.id("show").text(Jet.checkArg(a,"undefined default"));\n}function checkNull(){\n　J.id("show").text(Jet.checkArg(b,"null default"));\n}function checkNormal(){\n　J.id("show").text(Jet.checkArg(c,"default"));\n}\n</script>'},{title:"Jet.lang()",intro:"Set language",test:true,function:"Set all text language in JetterJs,you can set 'Chinese' or 'English'",howUse:"Parameter:String;",code:'<input type="text" id="test" jet-valid="date" onclick="showConfirm()"/>\n<input type="button" value="Selected Chinese" onclick="sChinese()"/>\n<input type="button" value="Reset" onclick="reset()"/>\n<div id="show"></div>\n<script>\nfunction sChinese(){\n　Jet.lang("Chinese");\n　//change all the text in this library\n　J.id("test").focus();\n　J.id("test").blur();\n　J.id("show").text("Select Chinese");\n}function reset(){\n　Jet.lang("English");\n　J.id("test").focus();\n　J.id("test").blur();\n　J.id("show").text("Has reseted");\n}\n</script>'},{title:"Jet.jump()",intro:"Jump a page",test:true,function:"Jump a page with a link",howUse:"Parameter:String;",code:'<input type="button" value="Test jump" onclick="testjump()"/>\n<script>\nfunction testjump(){\n　Jet.jump("http://theajack.github.io");\n}\n</script>'},{title:"Jet.open()",intro:"Open a page",test:true,function:"Open a page in a new window",howUse:"Parameter:String;",code:'<input type="button" value="Test open" onclick="testOpen()"/>\n<script>\nfunction testOpen(){\n　Jet.open("http://theajack.github.io");\n}\n</script>'},{title:"Jet.getUrlPara()",intro:"Get parameters in url",test:false,function:"Get parameters in url",howUse:"Parameter:null;Return:String|Json",code:'<script>\n　//get parameters of this page link\n\n　//Many parameters\n　var json=Jet.getUrlPara();\n　//One parameters\n　var string=Jet.getUrlPara();\n　//if 0 parameter ,will return ""\n</script>'},{title:"Jet.sign()",intro:"Get sign of a number",test:true,function:"Get sign of a number",howUse:"Parameter:Number;Return:1|-1",code:'<input type="button" value="Test sign" onclick="testsign()"/>\n<div id="show"></div>\n<script>\nvar a=-10;\nfunction testsign(){\n　var b=Jet.sign(a)*100;\n　J.id("show").text("Result="+b);\n}\n</script>'},{title:"Jet.getRandom()",intro:"Get a random number",test:true,function:"Get a random number between a max number and a min number",howUse:"Parameter:Number,Number;Return:Number",code:'<input type="text" id="min" jet-valid="number" placeholder="input min"/>\n<input type="text" id="max" jet-valid="number" placeholder="input max"/>\n<input type="button" value="Get a random num" onclick="testGetRandom()"/>\n<div id="show"></div>\n<script>\nfunction testGetRandom(){\n　var min=parseInt(J.id("min").val());\n　var max=parseInt(J.id("max").val());\n　var num=Jet.getRandom(min,max);\n　J.id("show").text(num);\n}\n</script>'},{title:"Jet.copy()",intro:"Copy string",test:true,function:"Copy string to clipboard",howUse:"Parameter:String",code:'<input type="button" value="copy some text" onclick="testCopy()"/>\n<input type="text" placeholder="Ctrl+v on me"/><script>\nfunction testCopy(){\n　Jet.copy("This is for copy");\n　Jet.show("Copyed");\n　//may not supported in some browser\n}\n</script>'},{title:"Jet.isMobile()",intro:"Check is moblie",test:true,function:"Check program is run in moblie",howUse:"Parameter:null;return:Boolean",code:'<input type="button" value="check is mobile" onclick="testmobile()"/>\n<div id="show"></div>\n<script>\nfunction testmobile(){\n　J.id("show").text(Jet.isMobile());\n}\n</script>'},{title:"jet=Jet",intro:"jet equals Jet",test:false,function:"jet equals Jet",howUse:"null",code:'<script>\n　jet.show("aa");\n　//Jet=jet\n　//...\n</script>'},{title:"Array.each()",intro:"Traversal an Array",test:true,function:"Traversal an Array with callback",howUse:"Parameter:Function(item,index);return:this",code:'<input type="button" value="test each" onclick="testArrayEach()"/>\n<input type="button" value="test each width index" onclick="testArrayEachIndex()"/>\n<div id="show"></div>\n<script>\nvar arr=[1,2,3,4,5]\nfunction testArrayEach(){\n　var s="";\n　arr.each(function(item){\n　　s+=(" item: "+item);\n　});\n　J.id("show").text(s);\n}\nfunction testArrayEachIndex(){\n　var s="";\n　arr.each(function(item,i){\n　　s+=(" item"+i+": "+item);\n　});\n　J.id("show").text(s);\n}\n</script>'},{title:"Array.removeByIndex()",intro:"Remove item of Array",test:true,function:"Remove item of Array by index",howUse:"Parameter:int;return:this",code:'<input type="button" value="test remove by index" onclick="removeByIndexTest()"/>\n<div id="show">a,b,c,d,e</div>\n<script>\nvar arr=["a","b","c","d","e"];\nfunction removeByIndexTest(){\n　arr.removeByIndex(3);\n　J.id("show").text(arr);\n}\n</script>'},{title:"Array.remove()",intro:"Remove item of Array",test:true,function:"Remove item of Array",howUse:"Parameter:Object;return:this",code:'<input type="button" value="test remove" onclick="removeTest()"/>\n<div id="show">a,b,c,d,e</div>\n<script>\nvar arr=["a","b","c","d","e"];\nfunction removeTest(){\n　arr.remove("d");\n　J.id("show").text(arr);\n}\n</script>'},{title:"Array.insert()",intro:"Insert item into array",test:true,function:"Insert item into array after a index",howUse:"Parameter:Object,index;return:this",code:'<input type="button" value="test insert" onclick="insertTest()"/>\n<div id="show">a,b,c,d,e</div>\n<script>\nvar arr=["a","b","c","d","e"];\nfunction insertTest(){\n　arr.insert("x",3);\n　J.id("show").text(arr);\n}\n</script>'},{title:"Array.append()",intro:"Append item into array",test:true,function:"Append item into array,it will be the last one",howUse:"Parameter:Object;return:this",code:'<input type="button" value="test append" onclick="appendTest()"/>\n<div id="show">a,b,c,d,e</div>\n<script>\nvar arr=["a","b","c","d","e"];\nfunction appendTest(){\n　arr.append("x");\n　J.id("show").text(arr);\n}\n</script>'},{title:"Array.prepend()",intro:"Prepend item into array",test:true,function:"Prepend item into array,it will be the first one",howUse:"Parameter:Object;return:this",code:'<input type="button" value="test prepend" onclick="prependTest()"/>\n<div id="show">a,b,c,d,e</div>\n<script>\nvar arr=["a","b","c","d","e"];\nfunction prependTest(){\n　arr.prepend("x");\n　J.id("show").text(arr);\n}\n</script>'},{title:"Array.sort()",intro:"Sort Array",test:true,function:"Sort a number Array asc or desc",howUse:"Parameter:[Boolean];return:this",code:'<input type="button" value="test sort" onclick="sortTest()"/>\n<input type="button" value="test sort desc" onclick="sortDescTest()"/>\n<div id="show">4,2,5,1,3</div>\n<script>\nvar arr=[4,2,5,1,3];\nfunction sortTest(){\n　arr.sort();\n　J.id("show").text(arr);\n}\nfunction sortDescTest(){\n　arr.sort(false);\n　J.id("show").text(arr);\n}\n</script>'},{title:"Array.sortByAttr()",intro:"Sort Array",test:true,function:"Sort an Array according to an attribute asc or desc",howUse:"Parameter:String[Boolean];return:this",code:'<input type="button" value="test sort by attr" onclick="sortTest()"/>\n<input type="button" value="test sort by attr desc" onclick="sortDescTest()"/>\n<div id="show">Bob:18; Jack:16; Allen:22; Thea:20; </div>\n</br>\n<input type="button" value="test sort string by length" onclick="sortString()"/>\n<div id="show1">aa3,aaaa5,aaa4,a2,aaaaaaa8</div>\n<script>\nvar arr=[{\n　　name:"Bob",age:18\n　},{\n　　name:"Jack",age:16\n　},{\n　　name:"Allen",age:22\n　},{\n　　name:"Thea",age:20\n　}];\nvar sArr=["aa3","aaaa5","aaa4","a2","aaaaaaa8"];\nfunction sortTest(){\n　arr.sortByAttr("age");\n　printInfo();\n}\nfunction sortDescTest(){\n　arr.sortByAttr("age",false);\n　printInfo();\n}\nfunction sortString(){\n　sArr.sortByAttr("length");\n　J.id("show1").text(sArr);\n}\nfunction printInfo(){\n　var s="";\n　arr.each(function(item){\n　　s+=(item.name+":"+item.age+"; ")\n　});\n　J.id("show").text(s);\n}\n</script>'},{title:"Array.reverse()",intro:"Reverse Array",test:true,function:"Reverse an Array",howUse:"return:this",code:'<input type="button" value="test reverse" onclick="reverseTest()"/>\n<div id="show">a,b,c,d,e</div>\n<script>\nvar arr=["a","b","c","d","e"];\nfunction reverseTest(){\n　arr.reverse();\n　J.id("show").text(arr);\n}\n</script>'},{title:"Array.empty()",intro:"Empty Array",test:true,function:"Remove all elements in an Array",howUse:"return:this",code:'<input type="button" value="test empty" onclick="emptyTest()"/>\n<div id="show">a,b,c,d,e</div>\n<script>\nvar arr=["a","b","c","d","e"];\nfunction emptyTest(){\n　arr.empty();\n　J.id("show").text(arr);\n}\n</script>'},{title:"String.has()",intro:"Check includes String",test:true,function:"Check whether a String or RegExp is in another String",howUse:"Parameter:String|RegExp;return:Boolean",code:'<input type="text" id="test1" placeholder="input one string" value="string"/>\n<input type="text" id="test2" placeholder="input another string" value="str"/>\n<input type="button" value="test has string" onclick="hasTest()"/>\n<div id="show"></div>\n<script>\nfunction hasTest(){\n　var a=J.id("test1").val();\n　var b=J.id("test2").val();\n　var has=a.has(b);\n　J.id("show").text(has);\n}\n</script>'},{title:"String.timesOf()",intro:"Count times",test:true,function:"Count times that a String or RegExp show in this",howUse:"Parameter:String|RegExp(/./g);return:int",code:'<input type="text" id="test1" placeholder="input one string" value="I love programming"/>\n<input type="text" id="test2" placeholder="input another string" value="o"/>\n<input type="button" value="count the times" onclick="countTest()"/>\n<div id="show"></div>\n<script>\nfunction countTest(){\n　var a=J.id("test1").val();\n　var b=J.id("test2").val();\n　var times=a.timesOf(b);\n　J.id("show").text("["+b+"] show ["+times+"] times in ["+a+"]");\n}\n</script>'},{title:"String.replaceAll()",intro:"Replace all a certain String",test:true,function:"Replace all a certain String or a RegExp with another one or Array",howUse:"Parameter:String(be replaced)|RegExp(/./g),String(replace)|Array;return:String",code:'<input type="text" id="test1" placeholder="input one string" value="I love programming"/>\n<input type="text" id="test2" placeholder="input another string" value="o"/>\n<input type="button" value="replace all" onclick="replaceAllTest()"/>\n<input type="button" value="replace by Array" onclick="replaceAllTestByArr()"/>\n<input type="button" value="replace by RegExp" onclick="replaceAllTestByRegExp()"/>\n<div id="show"></div>\n<script>\nfunction replaceAllTest(){\n　var a=J.id("test1").val();\n　var b=J.id("test2").val();\n　var str=a.replaceAll(b,"x");\n　J.id("show").text(str);\n}\nfunction replaceAllTestByArr(){\n　var a=J.id("test1").val();\n　var b=J.id("test2").val();\n　var str=a.replaceAll(b,["x","y"]);\n　J.id("show").text(str);\n}\nfunction replaceAllTestByRegExp(){\n　var a=J.id("test1").val();\n　var str=a.replaceAll(/o/g,["Reg","Exp"]);\n　J.id("show").text(str);\n}\n</script>'},{title:"String.indexsOf()",intro:"Get indexs",test:true,function:"Get indexs of all a certain String or RegExp,or get ith index by parameter 2",howUse:"Parameter:String|RegExp(/./g),[index];return:Array",code:'<input type="text" id="test1" placeholder="input one string" value="I love programming"/>\n<input type="text" id="test2" placeholder="input another string" value="o"/>\n<input type="button" value="get indexs" onclick="indexsTest()"/>\n<div id="show"></div>\n<script>\nfunction indexsTest(){\n　var a=J.id("test1").val();\n　var b=J.id("test2").val();\n　var arr=a.indexsOf(b);\n　J.id("show").text("["+arr+"]");\n}\n</script>'},{title:"String.insert()",intro:"Insert String",test:true,function:"Insert String into this in a index",howUse:"Parameter:String,int;return:String",code:'<input type="text" id="test1" placeholder="input one string" value="I love programming"/>\n<input type="text" id="test2" placeholder="input another string" value=" do"/>\n<input type="button" value="insert" onclick="insertTest()"/>\n<div id="show"></div>\n<script>\nfunction insertTest(){\n　var a=J.id("test1").val();\n　var b=J.id("test2").val();\n　var arr=a.insert(b,1);\n　J.id("show").text("["+arr+"]");\n}\n</script>'}]}